       <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cr√©er une nouvelle formation - ADSIAM Admin</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-pink: #e7a6b7;
            --primary-blue: #a5bfd4;
            --light-pink: #fce8ec;
            --light-blue: #e8f3f8;
            --soft-gray: #f5f5f7;
            --text-dark: #2f2f2f;
            --text-light: #6f6f6f;
            --white: #ffffff;
            --success: #28a745;
            --danger: #dc3545;
            --warning: #ffc107;
            --info: #17a2b8;
            --gradient-main: linear-gradient(135deg, var(--primary-pink), var(--primary-blue));
            --shadow-light: 0 4px 20px rgba(0,0,0,0.05);
            --shadow-medium: 0 8px 30px rgba(0,0,0,0.1);
            --shadow-heavy: 0 20px 60px rgba(0,0,0,0.15);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            line-height: 1.6;
            color: var(--text-dark);
            min-height: 100vh;
        }

        .admin-layout {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 280px;
            background: var(--text-dark);
            color: white;
            padding: 2rem 0;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
        }

        .sidebar-header {
            padding: 0 2rem 2rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar-header h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-pink);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .sidebar-menu {
            list-style: none;
            padding: 2rem 0;
        }

        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }

        .sidebar-menu a {
            display: block;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            padding: 1rem 2rem;
            transition: all 0.3s;
            font-weight: 500;
            border-left: 3px solid transparent;
        }

        .sidebar-menu a:hover,
        .sidebar-menu a.active {
            background: var(--primary-blue);
            color: white;
            border-left-color: var(--primary-pink);
            transform: translateX(5px);
        }

        .main-content {
            margin-left: 280px;
            flex: 1;
            padding: 2rem;
            background: transparent;
        }

        .content-header {
            background: white;
            padding: 2rem 3rem;
            border-radius: 20px;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .content-header h1 {
            font-size: 2.2rem;
            font-weight: 700;
            color: var(--text-dark);
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .header-icon {
            width: 50px;
            height: 50px;
            background: var(--gradient-main);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: white;
        }

        .form-container {
            background: white;
            border-radius: 25px;
            box-shadow: var(--shadow-medium);
            overflow: hidden;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .form-tabs {
            display: flex;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 1rem;
            border-radius: 20px 20px 0 0;
            gap: 1rem;
        }

        .form-tab {
            flex: 1;
            padding: 1.2rem 2rem;
            background: transparent;
            border: none;
            cursor: pointer;
            font-weight: 600;
            color: var(--text-light);
            border-radius: 15px;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.8rem;
            font-size: 0.95rem;
        }

        .form-tab.active {
            background: white;
            color: var(--primary-blue);
            box-shadow: var(--shadow-light);
            transform: translateY(-2px);
        }

        .form-tab:hover:not(.active) {
            background: rgba(255,255,255,0.7);
            transform: translateY(-1px);
        }

        .tab-content {
            display: none;
            padding: 3rem;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-section {
            margin-bottom: 3rem;
            padding-bottom: 2rem;
            border-bottom: 1px solid #eee;
        }

        .form-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }

        .form-section h3 {
            font-size: 1.6rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .section-icon {
            width: 40px;
            height: 40px;
            background: var(--gradient-main);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            color: white;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }

        .form-row-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.8rem;
            font-weight: 600;
            color: var(--text-dark);
            font-size: 0.95rem;
        }

        .form-label.required::after {
            content: ' *';
            color: var(--danger);
            font-weight: 700;
        }

        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 1.2rem 1.5rem;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s;
            font-family: inherit;
            background: #f8f9fa;
        }

        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: var(--primary-blue);
            background: white;
            box-shadow: 0 0 0 3px rgba(165, 191, 212, 0.1);
            transform: translateY(-1px);
        }

        .form-textarea {
            min-height: 120px;
            resize: vertical;
        }

        .form-select {
            cursor: pointer;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 1rem center;
            background-repeat: no-repeat;
            background-size: 1rem;
            padding-right: 3rem;
        }

        .btn {
            padding: 1.2rem 2.5rem;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.8rem;
            font-size: 1rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .btn-primary {
            background: var(--gradient-main);
            color: white;
            box-shadow: var(--shadow-light);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-medium);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-success:hover {
            background: #218838;
            transform: translateY(-2px);
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-small {
            padding: 0.8rem 1.5rem;
            font-size: 0.9rem;
        }

        .btn-icon {
            padding: 0.8rem;
            border-radius: 10px;
        }

        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 0.8rem;
            padding: 1rem 1.5rem;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid transparent;
            cursor: pointer;
            transition: all 0.3s;
        }

        .checkbox-item:hover {
            background: var(--light-blue);
            border-color: var(--primary-blue);
        }

        .checkbox-item input[type="checkbox"] {
            width: 20px;
            height: 20px;
            margin: 0;
        }

        /* Modules Builder */
        .modules-builder {
            margin-top: 2rem;
        }

        .add-module-btn {
            width: 100%;
            padding: 2rem;
            border: 2px dashed var(--primary-blue);
            background: var(--light-blue);
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            color: var(--primary-blue);
            font-weight: 600;
            font-size: 1.1rem;
        }

        .add-module-btn:hover {
            background: white;
            box-shadow: var(--shadow-light);
            transform: translateY(-2px);
        }

        .module-item {
            background: white;
            border-radius: 20px;
            margin-bottom: 2rem;
            overflow: hidden;
            border: 2px solid #e9ecef;
            transition: all 0.3s;
        }

        .module-item.expanded {
            border-color: var(--primary-blue);
            box-shadow: var(--shadow-medium);
        }

        .module-header {
            background: var(--gradient-main);
            color: white;
            padding: 1.5rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
        }

        .module-title {
            font-weight: 600;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .drag-handle {
            cursor: move;
            font-size: 1.2rem;
            opacity: 0.7;
        }

        .module-controls {
            display: flex;
            gap: 0.5rem;
        }

        .module-content {
            padding: 2.5rem;
            display: none;
            background: #fafbfc;
        }

        .module-content.expanded {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .partie-item {
            background: white;
            border-radius: 15px;
            margin-bottom: 1.5rem;
            border: 1px solid #e9ecef;
            overflow: hidden;
        }

        .partie-header {
            background: var(--light-pink);
            padding: 1.2rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }

        .partie-content {
            padding: 2rem;
            display: none;
        }

        .partie-content.expanded {
            display: block;
        }

        .content-type-selector {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 12px;
        }

        .content-type-btn {
            flex: 1;
            padding: 1rem 1.5rem;
            border: 2px solid transparent;
            background: white;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.8rem;
        }

        .content-type-btn.active {
            border-color: var(--primary-blue);
            background: var(--light-blue);
            color: var(--primary-blue);
        }

        .content-type-btn:hover:not(.active) {
            border-color: #dee2e6;
            transform: translateY(-1px);
        }

        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .video-upload {
            border: 2px dashed var(--primary-blue);
            background: var(--light-blue);
            padding: 3rem;
            text-align: center;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .video-upload:hover {
            background: white;
            box-shadow: var(--shadow-light);
        }

        .video-upload input[type="file"] {
            display: none;
        }

        .quiz-builder {
            background: var(--light-pink);
            border-radius: 15px;
            padding: 2rem;
        }

        .quiz-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .question-item {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 1.5rem;
            border: 1px solid #e9ecef;
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .answer-options {
            margin-top: 1.5rem;
        }

        .answer-option {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid transparent;
            transition: all 0.3s;
        }

        .answer-option:hover {
            border-color: var(--primary-blue);
        }

        .answer-option input[type="checkbox"] {
            width: 20px;
            height: 20px;
            margin: 0;
        }

        .answer-option input[type="text"] {
            border: none;
            background: transparent;
            padding: 0.5rem;
            flex: 1;
        }

        .quiz-type-selector {
            margin-bottom: 1.5rem;
        }

        .quiz-type-btn {
            padding: 0.8rem 1.5rem;
            border: 2px solid #e9ecef;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            margin-right: 1rem;
            transition: all 0.3s;
        }

        .quiz-type-btn.active {
            border-color: var(--primary-blue);
            background: var(--light-blue);
            color: var(--primary-blue);
        }

        .form-actions {
            padding: 3rem;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            display: flex;
            gap: 1.5rem;
            justify-content: flex-end;
            border-top: 1px solid #e9ecef;
        }

        .progress-indicator {
            background: #e9ecef;
            height: 6px;
            border-radius: 3px;
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: var(--gradient-main);
            width: 33%;
            transition: width 0.3s ease;
            border-radius: 3px;
        }

        .preview-section {
            background: var(--light-blue);
            border-radius: 15px;
            padding: 2rem;
            margin-top: 2rem;
        }

        .preview-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 1rem;
            border-left: 4px solid var(--primary-blue);
            box-shadow: var(--shadow-light);
        }

        .success-message {
            background: #d4edda;
            color: var(--success);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            display: none;
            text-align: center;
            font-weight: 600;
            border: 1px solid #c3e6cb;
        }

        .success-message.show {
            display: block;
            animation: slideDown 0.5s ease;
        }

        .error-message {
            background: #f8d7da;
            color: var(--danger);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            display: none;
            text-align: center;
            font-weight: 600;
            border: 1px solid #f5c6cb;
        }

        .error-message.show {
            display: block;
            animation: slideDown 0.5s ease;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
                z-index: 1000;
            }

            .main-content {
                margin-left: 0;
            }

            .form-row,
            .form-row-3 {
                grid-template-columns: 1fr;
            }

            .content-header {
                padding: 1.5rem 2rem;
            }

            .tab-content {
                padding: 2rem;
            }
        }

        @media (max-width: 768px) {
            .form-tabs {
                flex-direction: column;
                gap: 0.5rem;
            }

            .form-tab {
                padding: 1rem;
                font-size: 0.9rem;
            }

            .content-type-selector {
                flex-direction: column;
            }

            .checkbox-group {
                flex-direction: column;
            }

            .form-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="admin-layout">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="sidebar-header">
                <h2>üéì ADSIAM Admin</h2>
            </div>
            <ul class="sidebar-menu">
                <li><a href="/admin">üìä Tableau de bord</a></li>
                <li><a href="/admin/utilisateurs">üë• Utilisateurs</a></li>
                <li><a href="/admin/formations" class="active">üìö Formations</a></li>
                <li><a href="/admin/inscriptions">üìù Inscriptions</a></li>
                <li><a href="/admin/evenements">üìÖ √âv√©nements</a></li>
                <li><a href="/admin/rapports">üìä Rapports</a></li>
                <li><a href="/admin/messagerie">üí¨ Messagerie</a></li>
                <li><a href="/admin/parametres">‚öôÔ∏è Param√®tres</a></li>
            </ul>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <div class="content-header">
                <div>
                    <div class="header-icon">üìö</div>
                    <h1>Cr√©er une nouvelle formation</h1>
                </div>
                <a href="/admin/formations" class="btn btn-secondary">‚Üê Retour √† la liste</a>
            </div>

            <div class="progress-indicator">
                <div class="progress-bar" id="progressBar"></div>
            </div>

            <!-- Messages -->
            <div class="success-message" id="successMessage">
                ‚úÖ Formation cr√©√©e avec succ√®s !
            </div>
            <div class="error-message" id="errorMessage">
                ‚ùå Erreur lors de la cr√©ation de la formation
            </div>

            <form id="formationForm" class="form-container" method="POST" action="/admin/formations/nouvelle">
                <!-- Form Tabs -->
                <div class="form-tabs">
                    <button type="button" class="form-tab active" data-tab="basic">
                        üìù Informations g√©n√©rales
                    </button>
                    <button type="button" class="form-tab" data-tab="modules">
                        üìö Modules et contenu
                    </button>
                    <button type="button" class="form-tab" data-tab="preview">
                        üëÅÔ∏è Aper√ßu
                    </button>
                </div>

                <!-- Tab 1: Informations g√©n√©rales -->
                <div class="tab-content active" id="basic">
                    <div class="form-section">
                        <h3>
                            <div class="section-icon">üìã</div>
                            Informations de base
                        </h3>
                        
                        <div class="form-group">
                            <label for="titre" class="form-label required">Titre de la formation</label>
                            <input type="text" id="titre" name="titre" class="form-input" required 
                                   placeholder="Ex: Communication et relationnel en EHPAD">
                        </div>

                        <div class="form-group">
                            <label for="description" class="form-label required">Description d√©taill√©e</label>
                            <textarea id="description" name="description" class="form-textarea" rows="4" required
                                      placeholder="D√©crivez les objectifs, comp√©tences acquises et contenu de la formation..."></textarea>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="domaine" class="form-label required">Domaine</label>
                                <select id="domaine" name="domaine" class="form-select" required>
                                    <option value="">S√©lectionner un domaine</option>
                                    <option value="communication">Communication</option>
                                    <option value="hygiene">Hygi√®ne & S√©curit√©</option>
                                    <option value="ergonomie">Ergonomie</option>
                                    <option value="urgences">Urgences & Premiers secours</option>
                                    <option value="nutrition">Nutrition & Alimentation</option>
                                    <option value="pathologies">Pathologies sp√©cifiques</option>
                                    <option value="deontologie">D√©ontologie & √âthique</option>
                                    <option value="numerique">Outils num√©riques</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="niveau" class="form-label required">Niveau</label>
                                <select id="niveau" name="niveau" class="form-select" required>
                                    <option value="">S√©lectionner un niveau</option>
                                    <option value="debutant">D√©butant</option>
                                    <option value="intermediaire">Interm√©diaire</option>
                                    <option value="avance">Avanc√©</option>
                                    <option value="expert">Expert</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="prix" class="form-label">Prix (‚Ç¨)</label>
                                <input type="number" id="prix" name="prix" class="form-input" min="0" step="0.01" 
                                       placeholder="0.00">
                            </div>
                            <div class="form-group">
                                <label for="duree_heures" class="form-label">Dur√©e (heures)</label>
                                <input type="number" id="duree_heures" name="duree_heures" class="form-input" min="1" 
                                       placeholder="3">
                            </div>
                            <div class="form-group">
                                <label for="icone" class="form-label">Ic√¥ne (emoji)</label>
                                <input type="text" id="icone" name="icone" class="form-input" maxlength="2" 
                                       placeholder="üó£Ô∏è">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Options de la formation</label>
                            <div class="checkbox-group">
                                <label class="checkbox-item">
                                    <input type="checkbox" name="gratuit" value="true">
                                    üÜì Formation gratuite
                                </label>
                                <label class="checkbox-item">
                                    <input type="checkbox" name="populaire" value="true">
                                    ‚≠ê Formation populaire
                                </label>
                                <label class="checkbox-item">
                                    <input type="checkbox" name="certifiant" value="true">
                                    üèÜ Formation certifiante
                                </label>
                                <label class="checkbox-item">
                                    <input type="checkbox" name="nouveau" value="true">
                                    üÜï Nouvelle formation
                                </label>
                                <label class="checkbox-item">
                                    <input type="checkbox" name="actif" value="true" checked>
                                    ‚úÖ Formation active
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tab 2: Modules et contenu -->
                <div class="tab-content" id="modules">
                    <div class="form-section">
                        <h3>
                            <div class="section-icon">üìö</div>
                            Structure de la formation
                        </h3>
                        
                        <button type="button" class="add-module-btn" onclick="ajouterModule()">
                            ‚ûï Ajouter un module
                        </button>
                        
                        <div class="modules-builder" id="modulesContainer">
                            <!-- Les modules seront ajout√©s ici dynamiquement -->
                        </div>
                    </div>
                </div>

                <!-- Tab 3: Aper√ßu -->
                <div class="tab-content" id="preview">
                    <div class="form-section">
                        <h3>
                            <div class="section-icon">üëÅÔ∏è</div>
                            Aper√ßu de la formation
                        </h3>
                        <div class="preview-section" id="previewContent">
                            <p>Configurez d'abord les informations de base et les modules pour voir l'aper√ßu.</p>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="sauvegarderBrouillon()">
                        üíæ Sauvegarder en brouillon
                    </button>
                    <button type="submit" class="btn btn-primary">
                        ‚úÖ Cr√©er la formation
                    </button>
                </div>
            </form>
        </main>
    </div>

    <!-- Modal pour ajouter un domaine -->
    <div class="modal-overlay" id="domaineModal" style="display: none;">
        <div class="modal">
            <div class="modal-header">
                <h3>Ajouter un nouveau domaine</h3>
                <button type="button" class="btn-close" onclick="fermerModal('domaineModal')">‚úï</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="nouveauDomaine" class="form-label">Nom du domaine</label>
                    <input type="text" id="nouveauDomaine" class="form-input" placeholder="Ex: Bien-√™tre au travail">
                </div>
                <div class="form-group">
                    <label for="domaineDescription" class="form-label">Description (optionnel)</label>
                    <textarea id="domaineDescription" class="form-textarea" rows="3" placeholder="Description du domaine..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="fermerModal('domaineModal')">Annuler</button>
                <button type="button" class="btn btn-primary" onclick="confirmerAjoutDomaine()">Ajouter</button>
            </div>
        </div>
    </div>

    <style>
        /* Styles pour les modales */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }

        .modal {
            background: white;
            border-radius: 20px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: var(--shadow-heavy);
        }

        .modal-header {
            padding: 2rem 2rem 1rem;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 1.4rem;
            color: var(--text-dark);
        }

        .btn-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            color: var(--text-light);
            transition: all 0.3s;
        }

        .btn-close:hover {
            background: #f8f9fa;
            color: var(--danger);
        }

        .modal-body {
            padding: 2rem;
        }

        .modal-footer {
            padding: 1rem 2rem 2rem;
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }
    </style>

    <script>
        let moduleCounter = 0;
        let partieCounter = 0;
        let questionCounter = 0;

        // Gestion des onglets
        document.querySelectorAll('.form-tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.dataset.tab;
                
                // D√©sactiver tous les onglets
                document.querySelectorAll('.form-tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                
                // Activer l'onglet s√©lectionn√©
                tab.classList.add('active');
                document.getElementById(targetTab).classList.add('active');
                
                // Mettre √† jour la barre de progression
                updateProgressBar(targetTab);
                
                // G√©n√©rer l'aper√ßu si on va sur l'onglet preview
                if (targetTab === 'preview') {
                    genererApercu();
                }
            });
        });

        function updateProgressBar(tab) {
            const progressBar = document.getElementById('progressBar');
            switch(tab) {
                case 'basic':
                    progressBar.style.width = '33%';
                    break;
                case 'modules':
                    progressBar.style.width = '66%';
                    break;
                case 'preview':
                    progressBar.style.width = '100%';
                    break;
            }
        }

        function ajouterModule() {
            moduleCounter++;
            const moduleHtml = `
                <div class="module-item" data-module-id="${moduleCounter}">
                    <div class="module-header" onclick="toggleModule(${moduleCounter})">
                        <div class="module-title">
                            <span class="drag-handle">‚ãÆ‚ãÆ</span>
                            <span>Module ${moduleCounter}</span>
                        </div>
                        <div class="module-controls">
                            <button type="button" class="btn btn-icon btn-secondary" onclick="event.stopPropagation(); toggleModule(${moduleCounter})">
                                <span class="toggle-icon">‚ñº</span>
                            </button>
                            <button type="button" class="btn btn-icon btn-danger" onclick="event.stopPropagation(); supprimerModule(${moduleCounter})">üóëÔ∏è</button>
                        </div>
                    </div>
                    <div class="module-content" id="module-${moduleCounter}">
                        <div class="form-group">
                            <label class="form-label required">Titre du module</label>
                            <input type="text" class="form-input" name="modules[${moduleCounter}][titre]" 
                                   placeholder="Ex: Introduction √† la communication professionnelle" required>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-textarea" name="modules[${moduleCounter}][description]" 
                                      placeholder="Description du module..."></textarea>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Dur√©e (minutes)</label>
                                <input type="number" class="form-input" name="modules[${moduleCounter}][duree]" min="1" placeholder="15">
                            </div>
                            <div class="form-group">
                                <label class="form-label">Ordre</label>
                                <input type="number" class="form-input" name="modules[${moduleCounter}][ordre]" value="${moduleCounter}">
                            </div>
                        </div>
                        
                        <h4 style="margin: 2rem 0 1rem; color: var(--primary-blue); display: flex; align-items: center; gap: 0.5rem;">
                            üìë Parties du module
                            <button type="button" class="btn btn-success btn-small" onclick="ajouterPartie(${moduleCounter})">
                                ‚ûï Ajouter une partie
                            </button>
                        </h4>
                        
                        <div class="parties-container" id="parties-${moduleCounter}">
                            <!-- Les parties seront ajout√©es ici -->
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('modulesContainer').insertAdjacentHTML('beforeend', moduleHtml);
        }

        function ajouterPartie(moduleId) {
            partieCounter++;
            const partieHtml = `
                <div class="partie-item" data-partie-id="${partieCounter}">
                    <div class="partie-header" onclick="togglePartie(${partieCounter})">
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <span class="drag-handle">‚ãÆ‚ãÆ</span> 
                            <span>Partie ${partieCounter}</span>
                        </div>
                        <div>
                            <button type="button" class="btn btn-danger btn-small" onclick="event.stopPropagation(); supprimerPartie(${partieCounter})">üóëÔ∏è</button>
                        </div>
                    </div>
                    <div class="partie-content" id="partie-${partieCounter}">
                        <div class="form-group">
                            <label class="form-label required">Titre de la partie</label>
                            <input type="text" class="form-input" name="modules[${moduleId}][parties][${partieCounter}][titre]" 
                                   placeholder="Ex: R√¥le et enjeux de la communication" required>
                        </div>
                        
                        <div class="content-type-selector">
                            <button type="button" class="content-type-btn active" onclick="selectContentType(${partieCounter}, 'video')">
                                üé• Vid√©o
                            </button>
                            <button type="button" class="content-type-btn" onclick="selectContentType(${partieCounter}, 'quiz')">
                                ‚ùì Quiz
                            </button>
                            <button type="button" class="content-type-btn" onclick="selectContentType(${partieCounter}, 'document')">
                                üìÑ Document
                            </button>
                        </div>
                        
                        <!-- Contenu vid√©o -->
                        <div class="content-section active" id="video-${partieCounter}">
                            <div class="video-upload" onclick="document.getElementById('video-file-${partieCounter}').click()">
                                <input type="file" id="video-file-${partieCounter}" accept="video/*" 
                                       name="modules[${moduleId}][parties][${partieCounter}][video]" onchange="handleVideoUpload(${partieCounter}, this)">
                                <div>
                                    <div style="font-size: 3rem; margin-bottom: 1rem;">üé•</div>
                                    <div style="font-size: 1.2rem; font-weight: 600; margin-bottom: 0.5rem;">Cliquez pour ajouter une vid√©o</div>
                                    <div style="font-size: 0.9rem; color: var(--text-light);">
                                        Formats support√©s: MP4, WebM, AVI (max 500MB)
                                    </div>
                                </div>
                            </div>
                            <div class="video-preview" id="video-preview-${partieCounter}" style="display: none; margin-top: 1rem;">
                                <!-- Aper√ßu vid√©o -->
                            </div>
                        </div>
                        
                        <!-- Contenu quiz -->
                        <div class="content-section" id="quiz-${partieCounter}" style="display: none;">
                            <div class="quiz-builder">
                                <div class="quiz-header">
                                    <h4>Quiz de la partie</h4>
                                    <button type="button" class="btn btn-success btn-small" onclick="ajouterQuestion(${partieCounter})">
                                        ‚ûï Ajouter une question
                                    </button>
                                </div>
                                <div class="quiz-type-selector">
                                    <label class="form-label">Type de quiz</label>
                                    <button type="button" class="quiz-type-btn active" onclick="selectQuizType(${partieCounter}, 'unique')" data-type="unique">
                                        ‚ö™ Choix unique
                                    </button>
                                    <button type="button" class="quiz-type-btn" onclick="selectQuizType(${partieCounter}, 'multiple')" data-type="multiple">
                                        ‚òëÔ∏è Choix multiple
                                    </button>
                                    <input type="hidden" name="modules[${moduleId}][parties][${partieCounter}][quiz_type]" value="unique" id="quiz-type-${partieCounter}">
                                </div>
                                <div class="questions-container" id="questions-${partieCounter}">
                                    <!-- Les questions seront ajout√©es ici -->
                                </div>
                            </div>
                        </div>
                        
                        <!-- Contenu document -->
                        <div class="content-section" id="document-${partieCounter}" style="display: none;">
                            <div class="form-group">
                                <label class="form-label">Documents t√©l√©chargeables</label>
                                <input type="file" class="form-input" multiple accept=".pdf,.doc,.docx,.ppt,.pptx" 
                                       name="modules[${moduleId}][parties][${partieCounter}][documents]" onchange="handleDocumentUpload(${partieCounter}, this)">
                                <div class="file-list" id="documents-${partieCounter}" style="margin-top: 1rem;">
                                    <!-- Liste des documents -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById(`parties-${moduleId}`).insertAdjacentHTML('beforeend', partieHtml);
        }

        function ajouterQuestion(partieId) {
            questionCounter++;
            const questionHtml = `
                <div class="question-item" data-question-id="${questionCounter}">
                    <div class="question-header">
                        <h5>Question ${questionCounter}</h5>
                        <button type="button" class="btn btn-danger btn-small" onclick="supprimerQuestion(${questionCounter})">üóëÔ∏è</button>
                    </div>
                    <div class="form-group">
                        <label class="form-label required">Intitul√© de la question</label>
                        <input type="text" class="form-input" name="questions[${partieId}][${questionCounter}][intitule]" 
                               placeholder="Posez votre question ici..." required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Options de r√©ponse</label>
                        <div class="answer-options" id="answers-${questionCounter}">
                            <div class="answer-option">
                                <input type="checkbox" name="questions[${partieId}][${questionCounter}][reponses][0][correct]" value="true">
                                <input type="text" class="form-input" name="questions[${partieId}][${questionCounter}][reponses][0][texte]" placeholder="R√©ponse 1" required>
                            </div>
                            <div class="answer-option">
                                <input type="checkbox" name="questions[${partieId}][${questionCounter}][reponses][1][correct]" value="true">
                                <input type="text" class="form-input" name="questions[${partieId}][${questionCounter}][reponses][1][texte]" placeholder="R√©ponse 2" required>
                            </div>
                        </div>
                        <button type="button" class="btn btn-secondary btn-small" onclick="ajouterReponse(${questionCounter}, ${partieId})">‚ûï Ajouter une option</button>
                    </div>
                </div>
            `;
            document.getElementById(`questions-${partieId}`).insertAdjacentHTML('beforeend', questionHtml);
        }

        function ajouterReponse(questionId, partieId) {
            const answersContainer = document.getElementById(`answers-${questionId}`);
            const index = answersContainer.querySelectorAll('.answer-option').length;
            const answerHtml = `
                <div class="answer-option">
                    <input type="checkbox" name="questions[${partieId}][${questionId}][reponses][${index}][correct]" value="true">
                    <input type="text" class="form-input" name="questions[${partieId}][${questionId}][reponses][${index}][texte]" placeholder="R√©ponse ${index + 1}" required>
                </div>
            `;
            answersContainer.insertAdjacentHTML('beforeend', answerHtml);
        }

        function selectQuizType(partieId, type) {
            // Mettre √† jour les boutons
            const container = document.querySelector(`#quiz-${partieId} .quiz-type-selector`);
            container.querySelectorAll('.quiz-type-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.type === type);
            });

            // Mettre √† jour le champ cach√©
            document.getElementById(`quiz-type-${partieId}`).value = type;

            // G√©rer les checkboxes selon le type
            const questions = document.querySelectorAll(`#questions-${partieId} .question-item`);
            questions.forEach(question => {
                const checkboxes = question.querySelectorAll('input[type="checkbox"]');
                if (type === 'unique') {
                    checkboxes.forEach(cb => cb.type = 'radio');
                } else {
                    checkboxes.forEach(cb => cb.type = 'checkbox');
                }
            });
        }

        function selectContentType(partieId, type) {
            ['video', 'quiz', 'document'].forEach(t => {
                const section = document.getElementById(`${t}-${partieId}`);
                if (section) {
                    section.style.display = (t === type) ? 'block' : 'none';
                    section.classList.toggle('active', t === type);
                }
            });

            // Mettre √† jour les boutons
            const buttons = document.querySelectorAll(`[data-partie-id="${partieId}"] .content-type-btn`);
            buttons.forEach((btn, index) => {
                const types = ['video', 'quiz', 'document'];
                btn.classList.toggle('active', types[index] === type);
            });
        }

        function toggleModule(moduleId) {
            const content = document.getElementById(`module-${moduleId}`);
            const module = document.querySelector(`[data-module-id="${moduleId}"]`);
            const toggleIcon = module.querySelector('.toggle-icon');
            
            if (content && module) {
                content.classList.toggle('expanded');
                module.classList.toggle('expanded');
                toggleIcon.textContent = content.classList.contains('expanded') ? '‚ñ≤' : '‚ñº';
            }
        }

        function togglePartie(partieId) {
            const content = document.getElementById(`partie-${partieId}`);
            if (content) {
                content.classList.toggle('expanded');
            }
        }

        function supprimerModule(moduleId) {
            if (confirm('√ätes-vous s√ªr de vouloir supprimer ce module ?')) {
                const module = document.querySelector(`.module-item[data-module-id="${moduleId}"]`);
                if (module) module.remove();
            }
        }

        function supprimerPartie(partieId) {
            if (confirm('√ätes-vous s√ªr de vouloir supprimer cette partie ?')) {
                const partie = document.querySelector(`.partie-item[data-partie-id="${partieId}"]`);
                if (partie) partie.remove();
            }
        }

        function supprimerQuestion(questionId) {
            if (confirm('√ätes-vous s√ªr de vouloir supprimer cette question ?')) {
                const question = document.querySelector(`.question-item[data-question-id="${questionId}"]`);
                if (question) question.remove();
            }
        }

        function handleVideoUpload(partieId, input) {
            const preview = document.getElementById(`video-preview-${partieId}`);
            if (input.files && input.files[0]) {
                const file = input.files[0];
                const url = URL.createObjectURL(file);
                preview.innerHTML = `
                    <video src="${url}" controls style="max-width: 100%; border-radius: 12px; box-shadow: var(--shadow-light);">
                        Votre navigateur ne supporte pas les vid√©os HTML5.
                    </video>
                    <div style="margin-top: 1rem; padding: 1rem; background: var(--light-blue); border-radius: 10px;">
                        <strong>Fichier :</strong> ${file.name}<br>
                        <strong>Taille :</strong> ${(file.size / 1024 / 1024).toFixed(2)} MB
                    </div>
                `;
                preview.style.display = 'block';
            } else {
                preview.innerHTML = '';
                preview.style.display = 'none';
            }
        }

        function handleDocumentUpload(partieId, input) {
            const list = document.getElementById(`documents-${partieId}`);
            list.innerHTML = '';
            Array.from(input.files).forEach((file, index) => {
                const item = document.createElement('div');
                item.className = 'file-item';
                item.style.cssText = `
                    display: flex; 
                    justify-content: space-between; 
                    align-items: center; 
                    padding: 1rem; 
                    background: #f8f9fa; 
                    border-radius: 10px; 
                    margin-bottom: 0.5rem;
                    border: 1px solid #e9ecef;
                `;
                item.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 0.8rem;">
                        <span style="font-size: 1.5rem;">üìÑ</span>
                        <div>
                            <div style="font-weight: 600;">${file.name}</div>
                            <div style="font-size: 0.85rem; color: var(--text-light);">${(file.size / 1024).toFixed(1)} KB</div>
                        </div>
                    </div>
                    <button type="button" onclick="this.parentElement.remove()" style="background: none; border: none; color: var(--danger); cursor: pointer; padding: 0.5rem;">üóëÔ∏è</button>
                `;
                list.appendChild(item);
            });
        }

        function ajouterDomaine() {
            document.getElementById('domaineModal').style.display = 'flex';
            document.getElementById('nouveauDomaine').focus();
        }

        function fermerModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            // R√©initialiser les champs
            if (modalId === 'domaineModal') {
                document.getElementById('nouveauDomaine').value = '';
                document.getElementById('domaineDescription').value = '';
            }
        }

        function confirmerAjoutDomaine() {
            const nom = document.getElementById('nouveauDomaine').value.trim();
            if (!nom) {
                alert('Veuillez saisir un nom de domaine');
                return;
            }

            // Ajouter le domaine au select
            const select = document.getElementById('domaine');
            const option = document.createElement('option');
            option.value = nom.toLowerCase().replace(/\s+/g, '_');
            option.textContent = nom;
            option.selected = true;
            select.appendChild(option);

            // Fermer la modal
            fermerModal('domaineModal');

            // Message de confirmation
            showMessage('success', `Domaine "${nom}" ajout√© avec succ√®s !`);
        }

        function sauvegarderBrouillon() {
            const formData = new FormData(document.getElementById('formationForm'));
            localStorage.setItem('formation_brouillon', JSON.stringify(Object.fromEntries(formData)));
            showMessage('success', 'Brouillon sauvegard√© localement !');
        }

        function genererApercu() {
            const titre = document.getElementById('titre').value || 'Titre de la formation';
            const description = document.getElementById('description').value || 'Description non renseign√©e';
            const domaine = document.getElementById('domaine').value || 'Non sp√©cifi√©';
            const niveau = document.getElementById('niveau').value || 'Non sp√©cifi√©';
            const prix = document.getElementById('prix').value || '0';
            const modules = document.querySelectorAll('.module-item');
            
            let html = `
                <div class="preview-card">
                    <h2 style="color: var(--primary-blue); margin-bottom: 1rem;">${titre}</h2>
                    <p style="margin-bottom: 1rem;">${description}</p>
                    <div style="display: flex; gap: 1rem; margin-bottom: 1.5rem;">
                        <span style="background: var(--light-blue); padding: 0.5rem 1rem; border-radius: 20px; color: var(--primary-blue); font-weight: 600;">
                            ${domaine}
                        </span>
                        <span style="background: var(--light-pink); padding: 0.5rem 1rem; border-radius: 20px; color: var(--primary-pink); font-weight: 600;">
                            Niveau ${niveau}
                        </span>
                        <span style="background: #d4edda; padding: 0.5rem 1rem; border-radius: 20px; color: var(--success); font-weight: 600;">
                            ${prix === '0' ? 'Gratuit' : prix + '‚Ç¨'}
                        </span>
                    </div>
                </div>
            `;
            
            if (modules.length > 0) {
                html += `<div class="preview-card"><h3>Modules (${modules.length})</h3><ul style="margin-left: 1.5rem;">`;
                modules.forEach((module, index) => {
                    const moduleTitle = module.querySelector('input[name*="[titre]"]')?.value || `Module ${index + 1}`;
                    const parties = module.querySelectorAll('.partie-item').length;
                    html += `<li style="margin-bottom: 0.5rem;">${moduleTitle} ${parties > 0 ? `(${parties} parties)` : ''}</li>`;
                });
                html += `</ul></div>`;
            }
            
            document.getElementById('previewContent').innerHTML = html;
        }

        function showMessage(type, message) {
            const messageEl = document.getElementById(type === 'success' ? 'successMessage' : 'errorMessage');
            messageEl.textContent = message;
            messageEl.classList.add('show');
            setTimeout(() => {
                messageEl.classList.remove('show');
            }, 5000);
        }

        // Gestion de la soumission du formulaire
        document.getElementById('formationForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Validation basique
            const titre = document.getElementById('titre').value.trim();
            const description = document.getElementById('description').value.trim();
            const domaine = document.getElementById('domaine').value;
            const niveau = document.getElementById('niveau').value;
            
            if (!titre || !description || !domaine || !niveau) {
                showMessage('error', 'Veuillez remplir tous les champs obligatoires');
                return;
            }

            const modules = document.querySelectorAll('.module-item');
            if (modules.length === 0) {
                showMessage('error', 'Veuillez ajouter au moins un module √† votre formation');
                return;
            }

            // Validation des modules
            let moduleValid = true;
            modules.forEach(module => {
                const moduleTitle = module.querySelector('input[name*="[titre]"]').value.trim();
                if (!moduleTitle) {
                    moduleValid = false;
                }
            });

            if (!moduleValid) {
                showMessage('error', 'Tous les modules doivent avoir un titre');
                return;
            }

            // Affichage du loading
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '‚è≥ Cr√©ation en cours...';
            submitBtn.disabled = true;

            try {
                // Pr√©parer les donn√©es du formulaire
                const formData = new FormData(this);
                
                // Debug: Afficher toutes les donn√©es
                console.log('Donn√©es du formulaire:');
                for (let [key, value] of formData.entries()) {
                    console.log(`${key}: ${value}`);
                }
                
                // Ajouter les donn√©es des modules de mani√®re structur√©e
                const modulesData = [];
                modules.forEach((module, index) => {
                    const moduleData = {
                        titre: module.querySelector('input[name*="[titre]"]')?.value || '',
                        description: module.querySelector('textarea[name*="[description]"]')?.value || '',
                        duree: parseInt(module.querySelector('input[name*="[duree]"]')?.value) || 0,
                        ordre: parseInt(module.querySelector('input[name*="[ordre]"]')?.value) || index + 1,
                        parties: []
                    };

                    // R√©cup√©rer les parties du module
                    const parties = module.querySelectorAll('.partie-item');
                    parties.forEach(partie => {
                        const partieData = {
                            titre: partie.querySelector('input[name*="[titre]"]')?.value || '',
                            type_contenu: 'video', // Par d√©faut
                            questions: []
                        };

                        // R√©cup√©rer les questions si c'est un quiz
                        const questions = partie.querySelectorAll('.question-item');
                        questions.forEach(question => {
                            const questionData = {
                                intitule: question.querySelector('input[name*="[intitule]"]')?.value || '',
                                reponses: []
                            };

                            const reponses = question.querySelectorAll('.answer-option');
                            reponses.forEach(reponse => {
                                const reponseData = {
                                    texte: reponse.querySelector('input[type="text"]')?.value || '',
                                    correct: reponse.querySelector('input[type="checkbox"], input[type="radio"]')?.checked || false
                                };
                                questionData.reponses.push(reponseData);
                            });

                            partieData.questions.push(questionData);
                        });

                        moduleData.parties.push(partieData);
                    });

                    modulesData.push(moduleData);
                });

                // Ajouter les modules au FormData
                formData.append('modules_data', JSON.stringify(modulesData));

                // Calculer automatiquement nombre_modules et duree_heures
                formData.append('nombre_modules', modules.length);
                const totalDuree = modulesData.reduce((total, module) => total + (module.duree || 0), 0);
                formData.append('duree_heures', Math.ceil(totalDuree / 60)); // Convertir minutes en heures

                console.log('Modules data:', modulesData);
                console.log('Total modules:', modules.length);
                console.log('Dur√©e totale:', Math.ceil(totalDuree / 60), 'heures');

                // Envoyer les donn√©es
                const response = await fetch('/admin/formations/nouvelle', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    showMessage('success', 'Formation cr√©√©e avec succ√®s !');
                    setTimeout(() => {
                        window.location.href = '/admin/formations';
                    }, 2000);
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    showMessage('error', errorData.message || 'Erreur lors de la cr√©ation de la formation');
                }

            } catch (error) {
                console.error('Erreur:', error);
                showMessage('error', 'Erreur de connexion au serveur');
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Fermer les modales avec √âchap
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                document.querySelectorAll('.modal-overlay').forEach(modal => {
                    modal.style.display = 'none';
                });
            }
        });

        // Fermer les modales en cliquant sur l'overlay
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal-overlay')) {
                e.target.style.display = 'none';
            }
        });

        // Charger un brouillon sauvegard√© au chargement de la page
        window.addEventListener('load', function() {
            // Test de connectivit√© au chargement
            testerConnectivite().then(ok => {
                if (!ok) {
                    showMessage('error', 'Probl√®me de connexion avec le serveur admin');
                } else {
                    console.log('Connexion admin OK');
                }
            });

            const brouillon = localStorage.getItem('formation_brouillon');
            if (brouillon && confirm('Un brouillon de formation a √©t√© trouv√©. Voulez-vous le charger ?')) {
                try {
                    const data = JSON.parse(brouillon);
                    Object.keys(data).forEach(key => {
                        const element = document.querySelector(`[name="${key}"]`);
                        if (element) {
                            if (element.type === 'checkbox') {
                                element.checked = data[key] === 'true';
                            } else {
                                element.value = data[key];
                            }
                        }
                    });
                    showMessage('success', 'Brouillon charg√© avec succ√®s !');
                } catch (error) {
                    console.error('Erreur lors du chargement du brouillon:', error);
                }
            }

            // Ajouter un module par d√©faut
            ajouterModule();
            
            console.log('Cr√©ateur de formation ADSIAM charg√©');
            console.log('Interface moderne avec fonctionnalit√©s compl√®tes');
        });

        // Auto-sauvegarde du brouillon toutes les 30 secondes
        setInterval(() => {
            const formData = new FormData(document.getElementById('formationForm'));
            const data = Object.fromEntries(formData);
            if (Object.keys(data).length > 3) { // Seulement si il y a du contenu
                localStorage.setItem('formation_brouillon', JSON.stringify(data));
            }
        }, 30000);

        // Validation en temps r√©el
        document.getElementById('titre').addEventListener('input', function() {
            if (this.value.length > 100) {
                this.style.borderColor = 'var(--warning)';
                showMessage('error', 'Le titre ne doit pas d√©passer 100 caract√®res');
            } else {
                this.style.borderColor = '#e9ecef';
            }
        });

        document.getElementById('prix').addEventListener('input', function() {
            const gratuitCheckbox = document.querySelector('input[name="gratuit"]');
            if (this.value > 0) {
                gratuitCheckbox.checked = false;
            } else if (this.value == 0) {
                gratuitCheckbox.checked = true;
            }
        });

        // Synchroniser le checkbox gratuit avec le prix
        document.querySelector('input[name="gratuit"]').addEventListener('change', function() {
            const prixInput = document.getElementById('prix');
            if (this.checked) {
                prixInput.value = 0;
            }
        });
    </script>
</body>
</html>
     