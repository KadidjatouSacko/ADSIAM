<%# views/dashboard/formations.ejs %>

<% if (typeof contentFor !== 'undefined') { %>
  <%- contentFor('head') %>
<% } %>

<style>
    :root {
        --primary-pink: #e7a6b7;
        --primary-blue: #a5bfd4;
        --light-pink: #fce8ec;
        --light-blue: #e8f3f8;
        --soft-gray: #f5f5f7;
        --text-dark: #2f2f2f;
        --text-light: #6f6f6f;
        --white: #ffffff;
        --success: #28a745;
        --warning: #ffc107;
        --info: #17a2b8;
        --danger: #dc3545;
        --gradient-pink: linear-gradient(135deg, #fce8ec, #e7a6b7);
        --gradient-blue: linear-gradient(135deg, #e8f3f8, #a5bfd4);
        --gradient-contact: linear-gradient(135deg, #e7a6b7, #a5bfd4);
        --gradient-green: linear-gradient(135deg, #e2f8ee, #9dd6b5);
        --gradient-orange: linear-gradient(135deg, #ffe9dc, #ff9f80);
        --gradient-purple: linear-gradient(135deg, #f0e1ff, #c7a3ff);
    }

    .formations-container {
        padding: 2rem;
        max-width: 1600px;
        margin: 0 auto;
    }

    .page-header {
        background: var(--white);
        border-radius: 20px;
        padding: 2.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 10px 40px rgba(0,0,0,0.08);
        position: relative;
        overflow: hidden;
    }

    .page-header::before {
        content: '';
        position: absolute;
        top: -30%;
        right: -20%;
        width: 40%;
        height: 160%;
        background: var(--gradient-blue);
        border-radius: 50%;
        opacity: 0.1;
        transform: rotate(-15deg);
    }

    .page-title {
        font-size: 2.5rem;
        font-weight: 300;
        color: var(--text-dark);
        margin-bottom: 1rem;
        position: relative;
        z-index: 2;
    }

    .page-subtitle {
        font-size: 1.1rem;
        color: var(--text-light);
        position: relative;
        z-index: 2;
    }

    .breadcrumb {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        position: relative;
        z-index: 2;
    }

    .breadcrumb a {
        color: var(--text-light);
        text-decoration: none;
        transition: color 0.3s;
    }

    .breadcrumb a:hover {
        color: var(--primary-blue);
    }

    .breadcrumb-current {
        color: var(--primary-pink);
        font-weight: 500;
    }

    /* Filtres */
    .filters-section {
        background: var(--white);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 10px 40px rgba(0,0,0,0.08);
    }

    .filters-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: var(--text-dark);
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .filter-icon {
        width: 35px;
        height: 35px;
        background: var(--gradient-contact);
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1rem;
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
    }

    .filter-label {
        font-weight: 600;
        margin-bottom: 0.8rem;
        color: var(--text-dark);
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .filter-select {
        padding: 1rem;
        border: 2px solid var(--soft-gray);
        border-radius: 15px;
        background: white;
        transition: all 0.3s;
        cursor: pointer;
        font-size: 0.95rem;
    }

    .filter-select:focus {
        outline: none;
        border-color: var(--primary-blue);
        box-shadow: 0 5px 15px rgba(165, 191, 212, 0.2);
    }

    .filter-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8rem;
    }

    .filter-tag {
        background: var(--soft-gray);
        color: var(--text-dark);
        padding: 0.6rem 1.5rem;
        border-radius: 25px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s;
        border: 2px solid transparent;
    }

    .filter-tag:hover {
        background: var(--light-blue);
        color: var(--primary-blue);
    }

    .filter-tag.active {
        background: var(--gradient-blue);
        color: white;
        border-color: var(--primary-blue);
    }

    /* Stats rapides */
    .quick-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 3rem;
    }

    .quick-stat {
        background: var(--white);
        border-radius: 15px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 5px 20px rgba(0,0,0,0.05);
        transition: transform 0.3s;
    }

    .quick-stat:hover {
        transform: translateY(-5px);
    }

    .quick-stat::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        border-radius: 15px 15px 0 0;
    }

    .quick-stat:nth-child(1) { position: relative; }
    .quick-stat:nth-child(1)::before { background: var(--gradient-contact); }
    .quick-stat:nth-child(2) { position: relative; }
    .quick-stat:nth-child(2)::before { background: var(--gradient-green); }
    .quick-stat:nth-child(3) { position: relative; }
    .quick-stat:nth-child(3)::before { background: var(--gradient-blue); }
    .quick-stat:nth-child(4) { position: relative; }
    .quick-stat:nth-child(4)::before { background: var(--gradient-orange); }

    .quick-stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-dark);
        display: block;
        margin-bottom: 0.5rem;
    }

    .quick-stat-label {
        color: var(--text-light);
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    /* Grille des formations */
    .formations-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .formation-card {
        background: var(--white);
        border-radius: 20px;
        overflow: hidden;
        transition: all 0.3s;
        box-shadow: 0 10px 40px rgba(0,0,0,0.08);
        cursor: pointer;
        position: relative;
    }

    .formation-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 25px 60px rgba(0,0,0,0.15);
    }

    .formation-header {
        height: 150px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .formation-card:nth-child(odd) .formation-header { background: var(--gradient-pink); }
    .formation-card:nth-child(even) .formation-header { background: var(--gradient-blue); }
    .formation-card:nth-child(3n) .formation-header { background: var(--gradient-green); }
    .formation-card:nth-child(4n) .formation-header { background: var(--gradient-orange); }

    .formation-icon {
        font-size: 3rem;
        color: white;
        z-index: 2;
    }

    .formation-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.9);
        color: var(--text-dark);
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.75rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
    }

    .progress-badge {
        position: absolute;
        top: 1rem;
        left: 1rem;
        background: var(--success);
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .formation-content {
        padding: 1.5rem;
    }

    .formation-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 0.8rem;
        line-height: 1.3;
    }

    .formation-description {
        color: var(--text-light);
        line-height: 1.6;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .formation-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8rem;
        margin-bottom: 1.5rem;
    }

    .meta-badge {
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .meta-modules { background: var(--light-blue); color: var(--primary-blue); }
    .meta-duration { background: var(--light-pink); color: var(--primary-pink); }
    .meta-level { background: var(--soft-gray); color: var(--text-dark); }

    .formation-progress {
        margin-bottom: 1.5rem;
    }

    .progress-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        color: var(--text-light);
    }

    .progress-bar {
        background: var(--soft-gray);
        height: 6px;
        border-radius: 3px;
        overflow: hidden;
    }

    .progress-fill {
        background: var(--gradient-contact);
        height: 100%;
        border-radius: 3px;
        transition: width 1s ease;
    }

    .formation-actions {
        display: flex;
        gap: 1rem;
    }

    .btn {
        flex: 1;
        padding: 0.8rem 1.5rem;
        border: none;
        border-radius: 15px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        text-decoration: none;
        text-align: center;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .btn-primary {
        background: var(--gradient-contact);
        color: white;
        box-shadow: 0 5px 15px rgba(231, 166, 183, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(231, 166, 183, 0.4);
    }

    .btn-outline {
        background: transparent;
        color: var(--primary-blue);
        border: 2px solid var(--primary-blue);
    }

    .btn-outline:hover {
        background: var(--primary-blue);
        color: white;
    }

    /* États des formations */
    .status-completed {
        border-left: 4px solid var(--success);
    }

    .status-in-progress {
        border-left: 4px solid var(--warning);
    }

    .status-not-started {
        border-left: 4px solid var(--info);
    }

    .status-locked {
        border-left: 4px solid var(--danger);
        opacity: 0.7;
    }

    /* Responsive */
    @media (max-width: 1024px) {
        .formations-grid {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }
        
        .filters-grid {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
    }

    @media (max-width: 768px) {
        .formations-container {
            padding: 1rem;
        }
        
        .formations-grid {
            grid-template-columns: 1fr;
        }
        
        .quick-stats {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .formation-actions {
            flex-direction: column;
        }
        
        .page-header {
            padding: 2rem 1.5rem;
        }
    }

    /* Animation d'apparition */
    .fade-in {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease forwards;
    }

    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: var(--light-pink);
        border-radius: 20px;
        margin: 2rem 0;
    }

    .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
        opacity: 0.7;
    }

    .empty-state h3 {
        font-size: 1.5rem;
        color: var(--text-dark);
        margin-bottom: 1rem;
    }

    .empty-state p {
        color: var(--text-light);
        margin-bottom: 2rem;
        font-size: 1.1rem;
    }
</style>

<div class="formations-container">
    <!-- Header -->
    <div class="page-header fade-in">
        <div class="breadcrumb">
            <a href="/dashboard">🏠 Dashboard</a>
            <span>›</span>
            <span class="breadcrumb-current">Mes Formations</span>
        </div>
        <h1 class="page-title">Mes Formations</h1>
        <p class="page-subtitle">Gérez vos formations et suivez votre progression</p>
    </div>

    <!-- Stats rapides -->
    <div class="quick-stats fade-in">
        <div class="quick-stat">
            <span class="quick-stat-number">
                <%= typeof stats !== 'undefined' ? stats.totalInscriptions : 0 %>
            </span>
            <span class="quick-stat-label">Total</span>
        </div>
        <div class="quick-stat">
            <span class="quick-stat-number">
                <%= typeof stats !== 'undefined' ? stats.certificationsObtenues : 0 %>
            </span>
            <span class="quick-stat-label">Terminées</span>
        </div>
        <div class="quick-stat">
            <span class="quick-stat-number">
                <%= typeof stats !== 'undefined' ? stats.inscriptionsActives : 0 %>
            </span>
            <span class="quick-stat-label">En cours</span>
        </div>
        <div class="quick-stat">
            <span class="quick-stat-number">
                <%= typeof stats !== 'undefined' ? Math.round(stats.progressionGlobale) : 0 %>%
            </span>
            <span class="quick-stat-label">Progression</span>
        </div>
    </div>

    <!-- Filtres -->
    <div class="filters-section fade-in">
        <h3 class="filters-title">
            <div class="filter-icon">🔍</div>
            Filtrer mes formations
        </h3>
        
        <div class="filters-grid">
            <div class="filter-group">
                <label class="filter-label">Statut</label>
                <select class="filter-select" id="statusFilter">
                    <option value="">Tous les statuts</option>
                    <option value="en_cours">En cours</option>
                    <option value="termine">Terminées</option>
                    <option value="non_commence">Non commencées</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Domaine</label>
                <select class="filter-select" id="domaineFilter">
                    <option value="">Tous les domaines</option>
                    <option value="communication">Communication</option>
                    <option value="hygiene">Hygiène & Sécurité</option>
                    <option value="ergonomie">Ergonomie</option>
                    <option value="urgences">Urgences</option>
                    <option value="nutrition">Nutrition</option>
                    <option value="pathologies">Pathologies</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Progression</label>
                <select class="filter-select" id="progressFilter">
                    <option value="">Toute progression</option>
                    <option value="0-25">0-25%</option>
                    <option value="25-50">25-50%</option>
                    <option value="50-75">50-75%</option>
                    <option value="75-100">75-100%</option>
                </select>
            </div>
        </div>

        <div class="filter-tags">
            <button class="filter-tag active" data-filter="all">📋 Toutes</button>
            <button class="filter-tag" data-filter="current">🎯 En cours</button>
            <button class="filter-tag" data-filter="completed">✅ Terminées</button>
            <button class="filter-tag" data-filter="certified">🏆 Certifiées</button>
        </div>
    </div>

    <!-- Grille des formations -->
    <div class="formations-grid" id="formationsGrid">
        <% if (typeof formations !== 'undefined' && formations.length > 0) { %>
            <% formations.forEach((formation, index) => { %>
                <div class="formation-card fade-in status-<%= formation.statut || 'not-started' %>" 
                     data-status="<%= formation.statut %>" 
                     data-domaine="<%= formation.domaine %>"
                     data-progress="<%= formation.progression_pourcentage || 0 %>">
                    
                    <div class="formation-header">
                        <div class="formation-icon">
                            <%= formation.icone || (formation.domaine === 'communication' ? '🗣️' : 
                                formation.domaine === 'hygiene' ? '🛡️' : 
                                formation.domaine === 'ergonomie' ? '🏥' : 
                                formation.domaine === 'urgences' ? '🚨' : 
                                formation.domaine === 'nutrition' ? '🍽️' : 
                                formation.domaine === 'pathologies' ? '🧠' : '📚') %>
                        </div>
                        
                        <div class="formation-badge">
                            <% if (formation.statut === 'termine') { %>
                                Terminée
                            <% } else if (formation.statut === 'en_cours') { %>
                                En cours
                            <% } else { %>
                                Disponible
                            <% } %>
                        </div>

                        <% if (formation.progression_pourcentage && formation.progression_pourcentage > 0) { %>
                            <div class="progress-badge">
                                <%= Math.round(formation.progression_pourcentage) %>%
                            </div>
                        <% } %>
                    </div>

                    <div class="formation-content">
                        <h3 class="formation-title"><%= formation.titre %></h3>
                        <p class="formation-description">
                            <%= typeof truncateText !== 'undefined' ? truncateText(formation.description, 120) : formation.description %>
                        </p>

                        <div class="formation-meta">
                            <span class="meta-badge meta-modules">
                                📚 <%= formation.nombre_modules || 0 %> modules
                            </span>
                            <span class="meta-badge meta-duration">
                                ⏱️ <%= formation.duree_heures || 0 %>h
                            </span>
                            <span class="meta-badge meta-level">
                                📊 <%= formation.niveau || 'Débutant' %>
                            </span>
                        </div>

                        <% if (formation.statut === 'en_cours' || formation.progression_pourcentage > 0) { %>
                            <div class="formation-progress">
                                <div class="progress-label">
                                    <span>Progression</span>
                                    <span><%= Math.round(formation.progression_pourcentage || 0) %>%</span>
                                </div>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: <%= formation.progression_pourcentage || 0 %>%"></div>
                                </div>
                            </div>
                        <% } %>

                        <div class="formation-actions">
                            <% if (formation.statut === 'termine') { %>
                                <a href="/formation/<%= formation.id %>" class="btn btn-outline">📋 Revoir</a>
                                <a href="/certificat/<%= formation.inscription_id %>/download" class="btn btn-primary">🏆 Certificat</a>
                            <% } else if (formation.statut === 'en_cours') { %>
                                <a href="/formation/<%= formation.id %>/module/<%= formation.module_actuel || 1 %>" class="btn btn-primary">▶️ Continuer</a>
                                <a href="/formation/<%= formation.id %>" class="btn btn-outline">📋 Détails</a>
                            <% } else { %>
                                <a href="/formation/<%= formation.id %>" class="btn btn-primary">🚀 Commencer</a>
                                <a href="/formation/<%= formation.id %>/preview" class="btn btn-outline">👁️ Aperçu</a>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div class="empty-state">
                <div class="empty-state-icon">📚</div>
                <h3>Aucune formation trouvée</h3>
                <p>Vous n'êtes inscrit à aucune formation pour le moment</p>
                <a href="/formations/catalogue" class="btn btn-primary" style="display: inline-block; margin-top: 1rem;">
                    🔍 Découvrir les formations
                </a>
            </div>
        <% } %>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('📚 Page Mes Formations chargée');
    
    // Filtres
    const statusFilter = document.getElementById('statusFilter');
    const domaineFilter = document.getElementById('domaineFilter');
    const progressFilter = document.getElementById('progressFilter');
    const filterTags = document.querySelectorAll('.filter-tag');
    const formationCards = document.querySelectorAll('.formation-card');

    // Gestion des tags de filtre
    filterTags.forEach(tag => {
        tag.addEventListener('click', () => {
            filterTags.forEach(t => t.classList.remove('active'));
            tag.classList.add('active');
            
            const filter = tag.dataset.filter;
            filterFormations(filter);
        });
    });

    // Gestion des selects
    [statusFilter, domaineFilter, progressFilter].forEach(select => {
        select.addEventListener('change', applyFilters);
    });

    function filterFormations(type) {
        formationCards.forEach(card => {
            let show = true;
            
            switch(type) {
                case 'current':
                    show = card.dataset.status === 'en_cours';
                    break;
                case 'completed':
                    show = card.dataset.status === 'termine';
                    break;
                case 'certified':
                    show = card.dataset.status === 'termine';
                    break;
                default:
                    show = true;
            }
            
            card.style.display = show ? 'block' : 'none';
            if (show) {
                card.style.animation = 'fadeInUp 0.5s ease forwards';
            }
        });
        
        updateResultsCount();
    }

    function applyFilters() {
        const statusValue = statusFilter.value;
        const domaineValue = domaineFilter.value;
        const progressValue = progressFilter.value;

        formationCards.forEach(card => {
            let show = true;

            if (statusValue && card.dataset.status !== statusValue) show = false;
            if (domaineValue && card.dataset.domaine !== domaineValue) show = false;
            
            if (progressValue) {
                const progress = parseInt(card.dataset.progress);
                const [min, max] = progressValue.split('-').map(Number);
                if (progress < min || progress > max) show = false;
            }

            card.style.display = show ? 'block' : 'none';
            if (show) {
                card.style.animation = 'fadeInUp 0.5s ease forwards';
            }
        });

        updateResultsCount();
    }

    function updateResultsCount() {
        const visibleCards = Array.from(formationCards).filter(card => 
            card.style.display !== 'none'
        );
        
        console.log(`📊 ${visibleCards.length} formations affichées`);
    }

    // Interactions cartes
    formationCards.forEach(card => {
        card.addEventListener('click', function(e) {
            if (!e.target.classList.contains('btn') && !e.target.closest('.btn')) {
                const formationId = this.querySelector('.btn').href.split('/')[2];
                window.location.href = `/formation/${formationId}`;
            }
        });
    });

    // Animation au scroll
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                setTimeout(() => {
                    entry.target.style.animation = 'fadeInUp 0.6s ease forwards';
                }, index * 100);
            }
        });
    }, observerOptions);

    document.querySelectorAll('.fade-in').forEach(el => {
        observer.observe(el);
    });
});
</script>