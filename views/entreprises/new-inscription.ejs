<% locals.currentPage = 'inscriptions' %>

<!-- En-t√™te avec statistiques -->
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem; margin-bottom: 2rem;">
    <div class="stat-card primary">
        <div class="stat-number"><%= (stats && stats.total_employees) || 0 %></div>
        <div class="stat-label">Employ√©s actifs</div>
    </div>
    <div class="stat-card info">
        <div class="stat-number"><%= (stats && stats.total_inscriptions) || 0 %></div>
        <div class="stat-label">Inscriptions totales</div>
    </div>
    <div class="stat-card success">
        <div class="stat-number"><%= (stats && stats.formations_terminees) || 0 %></div>
        <div class="stat-label">Formations termin√©es</div>
    </div>
    <div class="stat-card warning">
        <div class="stat-number"><%= (stats && stats.certifications_obtenues) || 0 %></div>
        <div class="stat-label">Certifications</div>
    </div>
</div>

<!-- Navigation -->
<div class="card" style="margin-bottom: 2rem;">
    <div class="card-body" style="padding: 1.5rem;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h1 style="margin: 0; font-size: 1.8rem; font-weight: 600; color: var(--text-dark);">Inscription Group√©e</h1>
                <p style="margin: 0.5rem 0 0; color: var(--text-light);">
                    Inscrire plusieurs employ√©s √† plusieurs formations simultan√©ment
                </p>
            </div>
            <a href="/entreprise/inscriptions" class="btn btn-secondary">
                ‚Üê Retour
            </a>
        </div>
    </div>
</div>

<!-- Contenu principal -->
<div style="display: grid; grid-template-columns: 2fr 1fr; gap: 2rem; align-items: start;">
    
    <!-- Colonne principale -->
    <div>
        <!-- Section Employ√©s -->
        <div class="card" style="margin-bottom: 2rem;">
            <div class="card-header">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h3 class="card-title">1. S√©lectionner les employ√©s</h3>
                    <div style="display: flex; gap: 0.5rem; align-items: center;">
                        <button type="button" class="btn btn-secondary" onclick="toggleAllEmployees()" style="padding: 0.5rem 1rem; font-size: 0.9rem;">
                            <span id="toggleEmployeesText">Tout s√©lectionner</span>
                        </button>
                        <div class="view-toggle">
                            <button type="button" id="viewCards" class="toggle-btn active" onclick="switchView('cards')">
                                ‚äû
                            </button>
                            <button type="button" id="viewList" class="toggle-btn" onclick="switchView('list')">
                                ‚ò∞
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body" style="padding: 1.5rem;">
                
                <!-- Vue cartes -->
                <div id="cardsView" class="employees-view">
                    <% if (employees && employees.length > 0) { %>
                        <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1rem;">
                            <% employees.forEach(function(employee) { %>
                                <div class="employee-card" data-id="<%= employee.id %>" onclick="toggleEmployee(<%= employee.id %>)">
                                    <div style="display: flex; align-items: center; gap: 1rem; padding: 1rem;">
                                        <div class="employee-avatar">
                                            <%= (employee.prenom || '?').charAt(0) %><%= (employee.nom || '?').charAt(0) %>
                                        </div>
                                        <div style="flex: 1;">
                                            <div style="font-weight: 600; color: var(--text-dark);">
                                                <%= employee.prenom || '' %> <%= employee.nom || '' %>
                                            </div>
                                            <div style="font-size: 0.9rem; color: var(--text-light);">
                                                <%= employee.email || '' %>
                                            </div>
                                            <% if (employee.photo_profil) { %>
                                                <div style="font-size: 0.8rem; color: var(--primary-blue); margin-top: 0.25rem;">
                                                    <%= employee.photo_profil %>
                                                </div>
                                            <% } %>
                                        </div>
                                        <div class="selection-indicator">
                                            <span class="checkmark">‚úì</span>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <div style="text-align: center; padding: 3rem; color: var(--text-light);">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">üë•</div>
                            <p>Aucun employ√© disponible</p>
                            <a href="/entreprise/salaries/nouveau" class="btn btn-primary" style="margin-top: 1rem;">
                                Ajouter des employ√©s
                            </a>
                        </div>
                    <% } %>
                </div>

                <!-- Vue liste -->
                <div id="listView" class="employees-view" style="display: none;">
                    <% if (employees && employees.length > 0) { %>
                        <div class="table-container">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th style="width: 50px;">
                                            <input type="checkbox" id="selectAllTable" onchange="toggleAllEmployeesTable(this)">
                                        </th>
                                        <th>Employ√©</th>
                                        <th>Email</th>
                                        <th>Profession</th>
                                        <th>Statut</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% employees.forEach(function(employee) { %>
                                        <tr class="employee-row" data-id="<%= employee.id %>" onclick="toggleEmployeeRow(<%= employee.id %>, event)">
                                            <td>
                                                <input type="checkbox" class="employee-checkbox" data-id="<%= employee.id %>" onclick="event.stopPropagation();" onchange="handleEmployeeCheckbox(<%= employee.id %>, this.checked)">
                                            </td>
                                            <td>
                                                <div style="display: flex; align-items: center; gap: 0.75rem;">
                                                    <div style="width: 35px; height: 35px; background: var(--gradient-contact); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; font-size: 0.9rem;">
                                                        <%= (employee.prenom || '?').charAt(0) %><%= (employee.nom || '?').charAt(0) %>
                                                    </div>
                                                    <div>
                                                        <div style="font-weight: 600;">
                                                            <%= employee.prenom || '' %> <%= employee.nom || '' %>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td><%= employee.email || '' %></td>
                                            <td><%= employee.photo_profil || 'Non sp√©cifi√©' %></td>
                                            <td>
                                                <span class="badge badge-<%= (employee.statut === 'actif') ? 'success' : 'warning' %>">
                                                    <%= (employee.statut || 'inactif').charAt(0).toUpperCase() + (employee.statut || 'inactif').slice(1) %>
                                                </span>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Section Formations -->
        <div class="card">
            <div class="card-header">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h3 class="card-title">2. S√©lectionner les formations</h3>
                    <button type="button" class="btn btn-secondary" onclick="toggleAllFormations()" style="padding: 0.5rem 1rem; font-size: 0.9rem;">
                        <span id="toggleFormationsText">Tout s√©lectionner</span>
                    </button>
                </div>
            </div>
            <div class="card-body" style="padding: 1.5rem;">
                <% if (formations && formations.length > 0) { %>
                    <div style="display: grid; gap: 1rem;">
                        <% formations.forEach(function(formation) { %>
                            <div class="formation-card" data-id="<%= formation.id %>" data-prix="<%= formation.prix || 0 %>" data-gratuit="<%= (formation.gratuit || formation.prix == 0) ? 'true' : 'false' %>" onclick="toggleFormation(<%= formation.id %>)">
                                <div style="display: flex; align-items: center; gap: 1rem; padding: 1.5rem;">
                                    <div style="font-size: 2.5rem;"><%= formation.icone || 'üìö' %></div>
                                    <div style="flex: 1;">
                                        <div style="font-weight: 600; color: var(--text-dark); margin-bottom: 0.5rem;">
                                            <%= formation.titre || 'Formation sans titre' %>
                                        </div>
                                        <div style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem;">
                                            <% if (formation.niveau) { %>
                                                <span class="badge badge-info" style="font-size: 0.8rem;">
                                                    <%= formation.niveau.charAt(0).toUpperCase() + formation.niveau.slice(1) %>
                                                </span>
                                            <% } %>
                                            <% if (formation.duree_heures) { %>
                                                <span class="badge badge-secondary" style="font-size: 0.8rem;">
                                                    <%= formation.duree_heures %>h
                                                </span>
                                            <% } %>
                                            <% if (formation.nombre_modules) { %>
                                                <span class="badge badge-primary" style="font-size: 0.8rem;">
                                                    <%= formation.nombre_modules %> modules
                                                </span>
                                            <% } %>
                                        </div>
                                        <% if (formation.description) { %>
                                            <div style="font-size: 0.9rem; color: var(--text-light);">
                                                <%= formation.description.substring(0, 100) %>...
                                            </div>
                                        <% } %>
                                    </div>
                                    <div style="text-align: right;">
                                        <div style="font-size: 1.2rem; font-weight: 700; color: var(--primary-pink); margin-bottom: 0.5rem;">
                                            <% if (formation.gratuit || formation.prix == 0) { %>
                                                Gratuit
                                            <% } else { %>
                                                <%= formation.prix || 0 %>‚Ç¨
                                            <% } %>
                                        </div>
                                        <div class="selection-indicator">
                                            <span class="checkmark">‚úì</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } else { %>
                    <div style="text-align: center; padding: 3rem; color: var(--text-light);">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">üìö</div>
                        <p>Aucune formation disponible</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Colonne r√©sum√© -->
    <div>
        <div class="card" style="position: sticky; top: 2rem;">
            <div class="card-header">
                <h3 class="card-title">R√©sum√©</h3>
            </div>
            <div class="card-body" style="padding: 1.5rem;">
                
                <!-- Compteurs -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 2rem;">
                    <div style="text-align: center; padding: 1rem; background: var(--light-blue); border-radius: 8px;">
                        <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-blue);" id="selectedEmployeesCount">0</div>
                        <div style="font-size: 0.9rem; color: var(--text-light);">Employ√©s</div>
                    </div>
                    <div style="text-align: center; padding: 1rem; background: var(--light-pink); border-radius: 8px;">
                        <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-pink);" id="selectedFormationsCount">0</div>
                        <div style="font-size: 0.9rem; color: var(--text-light);">Formations</div>
                    </div>
                </div>

                <!-- D√©tails -->
                <div style="margin-bottom: 2rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <span style="font-weight: 600;">Total inscriptions :</span>
                        <span style="font-weight: 700; color: var(--primary-blue);" id="totalInscriptions">0</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <span style="font-weight: 600;">Co√ªt total :</span>
                        <span style="font-weight: 700; color: var(--primary-pink); font-size: 1.2rem;" id="totalCost">0‚Ç¨</span>
                    </div>
                </div>

                <!-- Listes des s√©lections -->
                <div style="margin-bottom: 2rem;">
                    <div style="margin-bottom: 1rem;">
                        <h5 style="font-size: 0.9rem; font-weight: 600; color: var(--text-dark); margin-bottom: 0.5rem;">Employ√©s s√©lectionn√©s :</h5>
                        <div id="selectedEmployeesList" style="max-height: 100px; overflow-y: auto; font-size: 0.85rem; color: var(--text-light); padding: 0.5rem; background: var(--soft-gray); border-radius: 4px;">
                            Aucune s√©lection
                        </div>
                    </div>
                    <div>
                        <h5 style="font-size: 0.9rem; font-weight: 600; color: var(--text-dark); margin-bottom: 0.5rem;">Formations s√©lectionn√©es :</h5>
                        <div id="selectedFormationsList" style="max-height: 100px; overflow-y: auto; font-size: 0.85rem; color: var(--text-light); padding: 0.5rem; background: var(--soft-gray); border-radius: 4px;">
                            Aucune s√©lection
                        </div>
                    </div>
                </div>

                <!-- Bouton -->
                <button type="button" class="btn btn-primary" onclick="createInscriptions()" id="createBtn" disabled 
                        style="width: 100%; padding: 1rem; font-weight: 600;">
                    Cr√©er les inscriptions
                </button>
            </div>
        </div>
    </div>
</div>
<div id="confirmationModal" class="modal-overlay" style="display: none;">
    <div class="modal-container">
        <div class="modal-header">
            <h3 class="modal-title">Confirmer les inscriptions</h3>
            <button type="button" class="modal-close" onclick="closeConfirmationModal()">&times;</button>
        </div>
        
        <div class="modal-body">
            <!-- R√©sum√© des s√©lections -->
            <div class="confirmation-summary">
                <div class="summary-section">
                    <h4>üìä R√©sum√©</h4>
                    <div class="summary-stats">
                        <div class="stat-item">
                            <span class="stat-label">Employ√©s s√©lectionn√©s :</span>
                            <span class="stat-value" id="modalEmployeesCount">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Formations s√©lectionn√©es :</span>
                            <span class="stat-value" id="modalFormationsCount">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Total inscriptions :</span>
                            <span class="stat-value highlight" id="modalTotalInscriptions">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Co√ªt total :</span>
                            <span class="stat-value cost" id="modalTotalCost">0‚Ç¨</span>
                        </div>
                    </div>
                </div>

                <!-- Liste des employ√©s -->
                <div class="summary-section">
                    <h4>üë• Employ√©s concern√©s</h4>
                    <div class="employees-list" id="modalEmployeesList">
                        <!-- G√©n√©r√© dynamiquement -->
                    </div>
                </div>

                <!-- Liste des formations -->
                <div class="summary-section">
                    <h4>üìö Formations s√©lectionn√©es</h4>
                    <div class="formations-list" id="modalFormationsList">
                        <!-- G√©n√©r√© dynamiquement -->
                    </div>
                </div>

                <!-- D√©tails par employ√© -->
                <div class="summary-section">
                    <h4>üìã D√©tail des inscriptions</h4>
                    <div class="inscriptions-preview" id="modalInscriptionsPreview">
                        <!-- G√©n√©r√© dynamiquement -->
                    </div>
                </div>
            </div>

            <!-- Avertissements √©ventuels -->
            <div id="modalWarnings" class="warnings-section" style="display: none;">
                <div class="warning-box">
                    <h5>‚ö†Ô∏è Attention</h5>
                    <ul id="warningsList"></ul>
                </div>
            </div>
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeConfirmationModal()">
                Annuler
            </button>
            <button type="button" class="btn btn-primary" onclick="confirmInscriptions()" id="confirmBtn">
                Cr√©er les inscriptions
            </button>
        </div>
    </div>
</div>

<style>
/* Styles pour la modale */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(2px);
}

.modal-container {
    background: white;
    border-radius: 20px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow: hidden;
    box-shadow: 0 25px 80px rgba(0, 0, 0, 0.3);
    animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalSlideIn {
    from {
        opacity: 0;
        transform: translateY(-50px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.modal-header {
    padding: 2rem 2rem 1rem;
    border-bottom: 1px solid var(--soft-gray);
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.modal-title {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-dark);
}

.modal-close {
    background: none;
    border: none;
    font-size: 2rem;
    color: var(--text-light);
    cursor: pointer;
    padding: 0;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
}

.modal-close:hover {
    background: var(--soft-gray);
    color: var(--text-dark);
}

.modal-body {
    padding: 2rem;
    max-height: 60vh;
    overflow-y: auto;
}

.confirmation-summary {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.summary-section {
    background: var(--soft-gray);
    border-radius: 15px;
    padding: 1.5rem;
}

.summary-section h4 {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-dark);
}

.summary-stats {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
}

.stat-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
}

.stat-label {
    color: var(--text-light);
    font-size: 0.95rem;
}

.stat-value {
    font-weight: 600;
    color: var(--text-dark);
}

.stat-value.highlight {
    color: var(--primary-blue);
    font-size: 1.1rem;
}

.stat-value.cost {
    color: var(--primary-pink);
    font-size: 1.1rem;
}

.employees-list, .formations-list {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
}

.employee-item, .formation-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: white;
    border-radius: 10px;
    border-left: 4px solid var(--primary-blue);
}

.formation-item {
    border-left-color: var(--primary-pink);
}

.employee-avatar-small {
    width: 35px;
    height: 35px;
    background: var(--gradient-contact);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 0.9rem;
}

.formation-icon-small {
    font-size: 1.5rem;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.item-details {
    flex: 1;
}

.item-name {
    font-weight: 600;
    color: var(--text-dark);
    margin-bottom: 0.2rem;
}

.item-info {
    font-size: 0.85rem;
    color: var(--text-light);
}

.item-price {
    font-weight: 600;
    color: var(--primary-pink);
}

.inscriptions-preview {
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid var(--soft-gray);
    border-radius: 10px;
    background: white;
}

.inscription-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.8rem 1rem;
    border-bottom: 1px solid var(--soft-gray);
    font-size: 0.9rem;
}

.inscription-item:last-child {
    border-bottom: none;
}

.inscription-employee {
    font-weight: 500;
    color: var(--text-dark);
}

.inscription-formation {
    color: var(--text-light);
}

.inscription-price {
    font-weight: 600;
    color: var(--primary-pink);
}

.warnings-section {
    margin-top: 1.5rem;
}

.warning-box {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 10px;
    padding: 1rem;
}

.warning-box h5 {
    margin: 0 0 0.5rem 0;
    color: #856404;
}

.warning-box ul {
    margin: 0;
    padding-left: 1.2rem;
    color: #856404;
}

.modal-footer {
    padding: 1.5rem 2rem;
    border-top: 1px solid var(--soft-gray);
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
}

.modal-footer .btn {
    min-width: 140px;
}

/* Responsive */
@media (max-width: 768px) {
    .modal-container {
        width: 95%;
        margin: 1rem;
    }
    
    .modal-header, .modal-body, .modal-footer {
        padding: 1.5rem;
    }
    
    .summary-stats {
        grid-template-columns: 1fr;
    }
    
    .modal-footer {
        flex-direction: column;
    }
    
    .modal-footer .btn {
        width: 100%;
    }
}
</style>


<style>
/* Styles pour les cartes employ√©s et formations */
.employee-card, .formation-card {
    background: var(--soft-gray);
    border: 2px solid transparent;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.employee-card:hover, .formation-card:hover {
    background: var(--light-blue);
    border-color: var(--primary-blue);
}

.employee-card.selected, .formation-card.selected {
    background: var(--light-blue);
    border-color: var(--primary-blue);
    box-shadow: 0 4px 12px rgba(165, 191, 212, 0.3);
}

/* Avatar employ√© */
.employee-avatar {
    width: 45px;
    height: 45px;
    background: var(--gradient-contact);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 1rem;
}

/* Indicateur de s√©lection */
.selection-indicator {
    width: 24px;
    height: 24px;
    border: 2px solid var(--text-light);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.selected .selection-indicator {
    background: var(--primary-blue);
    border-color: var(--primary-blue);
}

.selection-indicator .checkmark {
    color: white;
    font-weight: bold;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.selected .selection-indicator .checkmark {
    opacity: 1;
}

/* Boutons de vue */
.view-toggle {
    display: flex;
    background: var(--soft-gray);
    border-radius: 8px;
    padding: 0.25rem;
}

.toggle-btn {
    background: transparent;
    border: none;
    padding: 0.5rem;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
    color: var(--text-light);
    font-size: 1rem;
}

.toggle-btn.active {
    background: var(--primary-blue);
    color: white;
}

/* Table styles */
.table-container {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid var(--soft-gray);
    border-radius: 8px;
}

.table {
    width: 100%;
    border-collapse: collapse;
    margin: 0;
}

.table th,
.table td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid var(--soft-gray);
}

.table th {
    background: var(--soft-gray);
    font-weight: 600;
    color: var(--text-dark);
    position: sticky;
    top: 0;
    z-index: 1;
}

.employee-row {
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.employee-row:hover {
    background: var(--light-blue);
}

.employee-row.selected {
    background: var(--light-blue) !important;
}

/* Badges */
.badge {
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
}

.badge-success {
    background: #d4edda;
    color: #155724;
}

.badge-warning {
    background: #fff3cd;
    color: #856404;
}

.badge-info {
    background: var(--light-blue);
    color: var(--primary-blue);
}

.badge-primary {
    background: var(--light-pink);
    color: var(--primary-pink);
}

.badge-secondary {
    background: var(--soft-gray);
    color: var(--text-dark);
}

/* Responsive */
@media (max-width: 768px) {
    div[style*="grid-template-columns: 2fr 1fr"] {
        grid-template-columns: 1fr !important;
        gap: 1rem !important;
    }
    
    div[style*="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr))"] {
        grid-template-columns: 1fr !important;
    }
    
    div[style*="grid-template-columns: 1fr 1fr"] {
        grid-template-columns: 1fr !important;
    }
}
</style>
<script>
// Variables globales
let selectedEmployees = new Set();
let selectedFormations = new Set();

// Donn√©es - Protection contre les donn√©es undefined
const employeesData = <%
const safeEmployees = (employees || []).map(emp => ({
    id: parseInt(emp.id) || 0,
    prenom: String(emp.prenom || ''),
    nom: String(emp.nom || ''),
    email: String(emp.email || ''),
    photo_profil: String(emp.photo_profil || ''),
    statut: String(emp.statut || 'inactif')
}));
%><%- JSON.stringify(safeEmployees) %>;

const formationsData = <%
const safeFormations = (formations || []).map(form => ({
    id: parseInt(form.id) || 0,
    titre: String(form.titre || ''),
    description: String(form.description || ''),
    icone: String(form.icone || 'üìö'),
    niveau: String(form.niveau || ''),
    duree_heures: parseInt(form.duree_heures) || 0,
    nombre_modules: parseInt(form.nombre_modules) || 0,
    prix: parseFloat(form.prix) || 0,
    gratuit: Boolean(form.gratuit || form.est_gratuit || form.prix == 0)
}));
%><%- JSON.stringify(safeFormations) %>;

console.log('Initialisation inscription group√©e');
console.log('Employ√©s:', employeesData.length);
console.log('Formations:', formationsData.length);

// ========================================
// FONCTIONS DE BASCULEMENT ET S√âLECTION
// ========================================

// Basculer entre vues
function switchView(view) {
    const cardsView = document.getElementById('cardsView');
    const listView = document.getElementById('listView');
    const cardsBtn = document.getElementById('viewCards');
    const listBtn = document.getElementById('viewList');
    
    if (view === 'cards') {
        cardsView.style.display = 'block';
        listView.style.display = 'none';
        cardsBtn.classList.add('active');
        listBtn.classList.remove('active');
    } else {
        cardsView.style.display = 'none';
        listView.style.display = 'block';
        cardsBtn.classList.remove('active');
        listBtn.classList.add('active');
    }
}

// S√©lection d'un employ√© (vue cartes)
function toggleEmployee(id) {
    if (selectedEmployees.has(id)) {
        selectedEmployees.delete(id);
    } else {
        selectedEmployees.add(id);
    }
    
    updateEmployeeUI(id);
    updateSummary();
}

// S√©lection d'un employ√© (vue tableau)
function toggleEmployeeRow(id, event) {
    if (event.target.type === 'checkbox') {
        return;
    }
    
    const checkbox = event.currentTarget.querySelector('.employee-checkbox');
    if (checkbox) {
        checkbox.checked = !checkbox.checked;
        handleEmployeeCheckbox(id, checkbox.checked);
    }
}

// Gestion checkbox employ√©
function handleEmployeeCheckbox(id, checked) {
    if (checked) {
        selectedEmployees.add(id);
    } else {
        selectedEmployees.delete(id);
    }
    
    updateEmployeeUI(id);
    updateSummary();
}

// Mettre √† jour l'UI d'un employ√©
function updateEmployeeUI(id) {
    const isSelected = selectedEmployees.has(id);
    
    // Mettre √† jour la carte
    const card = document.querySelector('.employee-card[data-id="' + id + '"]');
    if (card) {
        if (isSelected) {
            card.classList.add('selected');
        } else {
            card.classList.remove('selected');
        }
    }
    
    // Mettre √† jour la ligne du tableau
    const row = document.querySelector('.employee-row[data-id="' + id + '"]');
    const checkbox = document.querySelector('.employee-checkbox[data-id="' + id + '"]');
    if (row && checkbox) {
        checkbox.checked = isSelected;
        if (isSelected) {
            row.classList.add('selected');
        } else {
            row.classList.remove('selected');
        }
    }
}

// S√©lection d'une formation
function toggleFormation(id) {
    if (selectedFormations.has(id)) {
        selectedFormations.delete(id);
    } else {
        selectedFormations.add(id);
    }
    
    updateFormationUI(id);
    updateSummary();
}

// Mettre √† jour l'UI d'une formation
function updateFormationUI(id) {
    const isSelected = selectedFormations.has(id);
    const card = document.querySelector('.formation-card[data-id="' + id + '"]');
    
    if (card) {
        if (isSelected) {
            card.classList.add('selected');
        } else {
            card.classList.remove('selected');
        }
    }
}

// Tout s√©lectionner/d√©s√©lectionner employ√©s
function toggleAllEmployees() {
    const button = document.getElementById('toggleEmployeesText');
    
    if (selectedEmployees.size === employeesData.length) {
        // Tout d√©s√©lectionner
        selectedEmployees.clear();
        button.textContent = 'Tout s√©lectionner';
    } else {
        // Tout s√©lectionner
        employeesData.forEach(function(emp) { selectedEmployees.add(emp.id); });
        button.textContent = 'Tout d√©s√©lectionner';
    }
    
    // Mettre √† jour l'UI
    employeesData.forEach(function(emp) { updateEmployeeUI(emp.id); });
    
    // Mettre √† jour la checkbox du tableau
    const selectAllCheckbox = document.getElementById('selectAllTable');
    if (selectAllCheckbox) {
        selectAllCheckbox.checked = selectedEmployees.size === employeesData.length;
    }
    
    updateSummary();
}

// Tout s√©lectionner/d√©s√©lectionner depuis le tableau
function toggleAllEmployeesTable(checkbox) {
    if (checkbox.checked) {
        employeesData.forEach(function(emp) { selectedEmployees.add(emp.id); });
        document.getElementById('toggleEmployeesText').textContent = 'Tout d√©s√©lectionner';
    } else {
        selectedEmployees.clear();
        document.getElementById('toggleEmployeesText').textContent = 'Tout s√©lectionner';
    }
    
    employeesData.forEach(function(emp) { updateEmployeeUI(emp.id); });
    updateSummary();
}

// Tout s√©lectionner/d√©s√©lectionner formations
function toggleAllFormations() {
    const button = document.getElementById('toggleFormationsText');
    
    if (selectedFormations.size === formationsData.length) {
        // Tout d√©s√©lectionner
        selectedFormations.clear();
        button.textContent = 'Tout s√©lectionner';
    } else {
        // Tout s√©lectionner
        formationsData.forEach(function(form) { selectedFormations.add(form.id); });
        button.textContent = 'Tout d√©s√©lectionner';
    }
    
    formationsData.forEach(function(form) { updateFormationUI(form.id); });
    updateSummary();
}

// ========================================
// FONCTIONS DE MISE √Ä JOUR DU R√âSUM√â
// ========================================

// Mettre √† jour le r√©sum√©
function updateSummary() {
    const employeesCount = selectedEmployees.size;
    const formationsCount = selectedFormations.size;
    const totalInscriptions = employeesCount * formationsCount;
    
    // Mettre √† jour les compteurs
    const employeesCountEl = document.getElementById('selectedEmployeesCount');
    const formationsCountEl = document.getElementById('selectedFormationsCount');
    const totalInscriptionsEl = document.getElementById('totalInscriptions');
    
    if (employeesCountEl) employeesCountEl.textContent = employeesCount;
    if (formationsCountEl) formationsCountEl.textContent = formationsCount;
    if (totalInscriptionsEl) totalInscriptionsEl.textContent = totalInscriptions;
    
    // Calculer le co√ªt total
    let totalCost = 0;
    let hasValidFormations = false;
    
    selectedFormations.forEach(function(formId) {
        const formation = formationsData.find(function(f) { 
            return parseInt(f.id) === parseInt(formId); 
        });
        
        if (formation) {
            hasValidFormations = true;
            const prix = parseFloat(formation.prix);
            const estGratuit = formation.gratuit === true || isNaN(prix) || prix <= 0;
            
            if (!estGratuit && prix > 0) {
                totalCost += prix;
            }
        }
    });
    
    // Multiplier par le nombre d'employ√©s
    if (hasValidFormations && employeesCount > 0) {
        totalCost *= employeesCount;
    }
    
    // Affichage s√©curis√© du co√ªt
    let costDisplay = 'Gratuit';
    if (totalCost > 0 && !isNaN(totalCost) && isFinite(totalCost)) {
        costDisplay = totalCost.toFixed(2) + '‚Ç¨';
    }
    
    const totalCostEl = document.getElementById('totalCost');
    if (totalCostEl) {
        totalCostEl.textContent = costDisplay;
    }
    
    // Mettre √† jour les listes
    updateEmployeesList();
    updateFormationsList();
    
    // Activer/d√©sactiver le bouton
    const createBtn = document.getElementById('createBtn');
    if (createBtn) {
        createBtn.disabled = employeesCount === 0 || formationsCount === 0;
    }
}

// Mettre √† jour la liste des employ√©s s√©lectionn√©s
function updateEmployeesList() {
    const container = document.getElementById('selectedEmployeesList');
    if (!container) return;
    
    if (selectedEmployees.size === 0) {
        container.innerHTML = 'Aucune s√©lection';
        return;
    }
    
    const html = Array.from(selectedEmployees).map(function(id) {
        const employee = employeesData.find(function(e) { return e.id === id; });
        if (employee) {
            return '<div style="padding: 0.25rem 0;">‚Ä¢ ' + (employee.prenom || '') + ' ' + (employee.nom || '') + '</div>';
        }
        return '';
    }).filter(html => html !== '').join('');
    
    container.innerHTML = html || 'Aucune s√©lection';
}

// Mettre √† jour la liste des formations s√©lectionn√©es
function updateFormationsList() {
    const container = document.getElementById('selectedFormationsList');
    if (!container) return;
    
    if (selectedFormations.size === 0) {
        container.innerHTML = 'Aucune s√©lection';
        return;
    }
    
    const html = Array.from(selectedFormations).map(function(id) {
        const formation = formationsData.find(function(f) { return f.id === id; });
        if (formation) {
            const prix = parseFloat(formation.prix) || 0;
            const price = formation.gratuit || prix === 0 ? 'Gratuit' : prix.toFixed(2) + '‚Ç¨';
            return '<div style="padding: 0.25rem 0;">‚Ä¢ ' + (formation.titre || 'Formation') + ' (' + price + ')</div>';
        }
        return '';
    }).filter(html => html !== '').join('');
    
    container.innerHTML = html || 'Aucune s√©lection';
}

// ========================================
// FONCTION PRINCIPALE - CR√âER INSCRIPTIONS
// ========================================

// Point d'entr√©e principal - Appelle la modale
async function createInscriptions() {
    if (selectedEmployees.size === 0 || selectedFormations.size === 0) {
        alert('Veuillez s√©lectionner au moins un employ√© et une formation.');
        return;
    }
    
    // Ouvrir la modale de confirmation au lieu du confirm()
    openConfirmationModal();
}

// ========================================
// FONCTIONS DE LA MODALE DE CONFIRMATION
// ========================================

// V√©rification des inscriptions existantes
async function checkExistingInscriptions() {
    try {
        const employeeIds = Array.from(selectedEmployees);
        const formationIds = Array.from(selectedFormations);
        
        const response = await fetch('/entreprise/inscriptions/check-existing', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                employees: employeeIds,
                formations: formationIds
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            return result.existing || [];
        }
        
        return [];
    } catch (error) {
        console.warn('Impossible de v√©rifier les doublons:', error);
        return [];
    }
}

// Ouvrir la modale avec les donn√©es
function openConfirmationModal() {
    if (selectedEmployees.size === 0 || selectedFormations.size === 0) {
        alert('Veuillez s√©lectionner au moins un employ√© et une formation.');
        return;
    }
    
    // Remplir les donn√©es de la modale
    populateModalData();
    
    // Afficher la modale
    document.getElementById('confirmationModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

// Fermer la modale
function closeConfirmationModal() {
    document.getElementById('confirmationModal').style.display = 'none';
    document.body.style.overflow = 'auto';
}

// Remplir les donn√©es de la modale
async function populateModalData() {
    const employeesCount = selectedEmployees.size;
    const formationsCount = selectedFormations.size;
    const totalInscriptions = employeesCount * formationsCount;
    
    // Calculer le co√ªt total
    let totalCost = 0;
    selectedFormations.forEach(function(formId) {
        const formation = formationsData.find(function(f) { 
            return parseInt(f.id) === parseInt(formId); 
        });
        
        if (formation) {
            const prix = parseFloat(formation.prix);
            const estGratuit = formation.gratuit === true || isNaN(prix) || prix <= 0;
            
            if (!estGratuit && prix > 0) {
                totalCost += prix;
            }
        }
    });
    totalCost *= employeesCount;
    
    // Mettre √† jour les statistiques
    document.getElementById('modalEmployeesCount').textContent = employeesCount;
    document.getElementById('modalFormationsCount').textContent = formationsCount;
    document.getElementById('modalTotalInscriptions').textContent = totalInscriptions;
    
    const costDisplay = totalCost === 0 ? 'Gratuit' : totalCost.toFixed(2) + '‚Ç¨';
    document.getElementById('modalTotalCost').textContent = costDisplay;
    
    // Remplir les listes
    populateModalEmployeesList();
    populateModalFormationsList();
    populateModalInscriptionsPreview();
    
    // V√©rifier les avertissements (avec doublons)
    await checkWarnings();
}

// Remplir la liste des employ√©s dans la modale
function populateModalEmployeesList() {
    const container = document.getElementById('modalEmployeesList');
    
    if (selectedEmployees.size === 0) {
        container.innerHTML = '<p style="text-align: center; color: var(--text-light);">Aucun employ√© s√©lectionn√©</p>';
        return;
    }
    
    const html = Array.from(selectedEmployees).map(function(id) {
        const employee = employeesData.find(function(e) { return e.id === id; });
        if (!employee) return '';
        
        return `
            <div class="employee-item">
                <div class="employee-avatar-small">
                    ${(employee.prenom || '?').charAt(0)}${(employee.nom || '?').charAt(0)}
                </div>
                <div class="item-details">
                    <div class="item-name">${employee.prenom} ${employee.nom}</div>
                    <div class="item-info">${employee.email || ''}</div>
                </div>
                <div class="item-status">
                    <span class="badge badge-${employee.statut === 'actif' ? 'success' : 'warning'}">
                        ${employee.statut || 'inactif'}
                    </span>
                </div>
            </div>
        `;
    }).filter(html => html !== '').join('');
    
    container.innerHTML = html;
}

// Remplir la liste des formations dans la modale
function populateModalFormationsList() {
    const container = document.getElementById('modalFormationsList');
    
    if (selectedFormations.size === 0) {
        container.innerHTML = '<p style="text-align: center; color: var(--text-light);">Aucune formation s√©lectionn√©e</p>';
        return;
    }
    
    const html = Array.from(selectedFormations).map(function(id) {
        const formation = formationsData.find(function(f) { return f.id === id; });
        if (!formation) return '';
        
        const prix = parseFloat(formation.prix) || 0;
        const priceDisplay = formation.gratuit || prix === 0 ? 'Gratuit' : prix.toFixed(2) + '‚Ç¨';
        
        return `
            <div class="formation-item">
                <div class="formation-icon-small">
                    ${formation.icone || 'üìö'}
                </div>
                <div class="item-details">
                    <div class="item-name">${formation.titre}</div>
                    <div class="item-info">
                        ${formation.niveau ? formation.niveau + ' ‚Ä¢ ' : ''}
                        ${formation.duree_heures ? formation.duree_heures + 'h' : ''}
                        ${formation.nombre_modules ? ' ‚Ä¢ ' + formation.nombre_modules + ' modules' : ''}
                    </div>
                </div>
                <div class="item-price">${priceDisplay}</div>
            </div>
        `;
    }).filter(html => html !== '').join('');
    
    container.innerHTML = html;
}

// Remplir le d√©tail des inscriptions
function populateModalInscriptionsPreview() {
    const container = document.getElementById('modalInscriptionsPreview');
    const inscriptions = [];
    
    selectedEmployees.forEach(function(empId) {
        const employee = employeesData.find(function(e) { return e.id === empId; });
        if (!employee) return;
        
        selectedFormations.forEach(function(formId) {
            const formation = formationsData.find(function(f) { return f.id === formId; });
            if (!formation) return;
            
            const prix = parseFloat(formation.prix) || 0;
            const priceDisplay = formation.gratuit || prix === 0 ? 'Gratuit' : prix.toFixed(2) + '‚Ç¨';
            
            inscriptions.push({
                employeeName: `${employee.prenom} ${employee.nom}`,
                formationName: formation.titre,
                price: priceDisplay
            });
        });
    });
    
    const html = inscriptions.map(function(inscription) {
        return `
            <div class="inscription-item">
                <span class="inscription-employee">${inscription.employeeName}</span>
                <span class="inscription-formation">${inscription.formationName}</span>
                <span class="inscription-price">${inscription.price}</span>
            </div>
        `;
    }).join('');
    
    container.innerHTML = html || '<p style="text-align: center; padding: 1rem; color: var(--text-light);">Aucune inscription √† cr√©er</p>';
}

// V√©rifier les avertissements avec doublons
async function checkWarnings() {
    const warnings = [];
    const warningsContainer = document.getElementById('modalWarnings');
    const warningsList = document.getElementById('warningsList');
    
    // V√©rifier les inscriptions existantes (doublons)
    const existingInscriptions = await checkExistingInscriptions();
    if (existingInscriptions.length > 0) {
        warnings.push(`${existingInscriptions.length} inscription(s) d√©j√† existante(s) seront ignor√©es.`);
        
        // D√©tailler les premiers doublons
        const detailsDoublons = existingInscriptions.slice(0, 3).map(existing => 
            `${existing.prenom} ${existing.nom} - ${existing.formation_titre}`
        ).join(', ');
        
        if (existingInscriptions.length <= 3) {
            warnings.push(`Doublons : ${detailsDoublons}`);
        } else {
            warnings.push(`Doublons : ${detailsDoublons} et ${existingInscriptions.length - 3} autre(s)...`);
        }
    }
    
    // V√©rifier les gros volumes
    const totalInscriptions = selectedEmployees.size * selectedFormations.size;
    if (totalInscriptions > 20) {
        warnings.push(`Vous allez cr√©er ${totalInscriptions} inscriptions. Cette op√©ration peut prendre quelques minutes.`);
    }
    
    // V√©rifier les formations payantes
    let totalPayantes = 0;
    selectedFormations.forEach(function(formId) {
        const formation = formationsData.find(function(f) { return f.id === formId; });
        if (formation && !formation.gratuit && formation.prix > 0) {
            totalPayantes++;
        }
    });
    
    if (totalPayantes > 0) {
        const totalCost = Array.from(selectedFormations).reduce(function(sum, formId) {
            const formation = formationsData.find(function(f) { return f.id === formId; });
            if (formation && !formation.gratuit && formation.prix > 0) {
                return sum + (parseFloat(formation.prix) || 0);
            }
            return sum;
        }, 0) * selectedEmployees.size;
        
        warnings.push(`${totalPayantes} formation(s) payante(s) s√©lectionn√©e(s). Co√ªt total : ${totalCost.toFixed(2)}‚Ç¨`);
    }
    
    // Afficher les avertissements
    if (warnings.length > 0) {
        const warningsHtml = warnings.map(warning => `<li>${warning}</li>`).join('');
        warningsList.innerHTML = warningsHtml;
        warningsContainer.style.display = 'block';
    } else {
        warningsContainer.style.display = 'none';
    }
}

// Confirmation finale dans la modale
async function confirmInscriptions() {
    const confirmBtn = document.getElementById('confirmBtn');
    const originalText = confirmBtn.textContent;
    
    try {
        confirmBtn.disabled = true;
        confirmBtn.textContent = 'Cr√©ation en cours...';
        
        // Cr√©er les inscriptions
        await performInscriptionsCreation();
        
        // Fermer la modale apr√®s succ√®s
        closeConfirmationModal();
        
    } catch (error) {
        console.error('Erreur lors de la confirmation:', error);
    } finally {
        confirmBtn.disabled = false;
        confirmBtn.textContent = originalText;
    }
}

// Fonction de cr√©ation des inscriptions
async function performInscriptionsCreation() {
    const requestData = {
        employees: Array.from(selectedEmployees).map(id => parseInt(id)),
        formations: Array.from(selectedFormations).map(id => parseInt(id))
    };
    
    console.log('Envoi des donn√©es:', requestData);
    
    const response = await fetch('/entreprise/inscriptions/groupee', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    });
    
    const result = await response.json();
    console.log('R√©ponse re√ßue:', result);
    
    if (response.ok && result.success) {
        const message = result.message || `${result.data?.totalCreated || 'Plusieurs'} inscription(s) cr√©√©e(s).`;
        alert(`Succ√®s !\n\n${message}`);
        
        // R√©initialiser les s√©lections
        resetAllSelections();
        
    } else {
        const errorMsg = result.message || 'Impossible de cr√©er les inscriptions.';
        alert(`Erreur :\n\n${errorMsg}`);
        console.error('Erreur serveur:', result);
        throw new Error(errorMsg);
    }
}

// ========================================
// FONCTIONS UTILITAIRES
// ========================================

// R√©initialiser toutes les s√©lections
function resetAllSelections() {
    selectedEmployees.clear();
    selectedFormations.clear();
    
    // R√©initialiser l'UI
    employeesData.forEach(function(emp) { updateEmployeeUI(emp.id); });
    formationsData.forEach(function(form) { updateFormationUI(form.id); });
    
    // R√©initialiser les boutons
    const toggleEmployeesBtn = document.getElementById('toggleEmployeesText');
    const toggleFormationsBtn = document.getElementById('toggleFormationsText');
    const selectAllCheckbox = document.getElementById('selectAllTable');
    
    if (toggleEmployeesBtn) toggleEmployeesBtn.textContent = 'Tout s√©lectionner';
    if (toggleFormationsBtn) toggleFormationsBtn.textContent = 'Tout s√©lectionner';
    if (selectAllCheckbox) selectAllCheckbox.checked = false;
    
    updateSummary();
    console.log('Toutes les s√©lections ont √©t√© r√©initialis√©es');
}

// Debug
function debugState() {
    console.log('√âtat actuel:', {
        selectedEmployees: Array.from(selectedEmployees),
        selectedFormations: Array.from(selectedFormations),
        employeesData: employeesData.length,
        formationsData: formationsData.length
    });
}

// ========================================
// GESTIONNAIRES D'√âV√âNEMENTS
// ========================================

// Fermer la modale avec Escape
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeConfirmationModal();
    }
});

// Fermer la modale en cliquant sur l'overlay
document.addEventListener('click', function(event) {
    if (event.target && event.target.id === 'confirmationModal') {
        closeConfirmationModal();
    }
});

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    console.log('Page inscription group√©e charg√©e');
    
    // V√©rifier que tous les √©l√©ments n√©cessaires sont pr√©sents
    const requiredElements = [
        'selectedEmployeesCount',
        'selectedFormationsCount', 
        'totalInscriptions',
        'totalCost',
        'createBtn',
        'confirmationModal'
    ];
    
    const missingElements = requiredElements.filter(function(id) {
        return !document.getElementById(id);
    });
    
    if (missingElements.length > 0) {
        console.warn('√âl√©ments manquants:', missingElements);
    }
    
    // Initialiser le r√©sum√©
    updateSummary();
    
    // Exposer les fonctions pour le debug
    window.debugInscriptionGroupee = {
        debugState: debugState,
        resetAllSelections: resetAllSelections,
        selectedEmployees: selectedEmployees,
        selectedFormations: selectedFormations,
        employeesData: employeesData,
        formationsData: formationsData
    };
    
    console.log('Debug functions available: window.debugInscriptionGroupee');
});

// ========================================
// AUTO-SAVE DES S√âLECTIONS (OPTIONNEL)
// ========================================

// Sauvegarder les s√©lections
function saveSelectionsToLocalStorage() {
    try {
        const selections = {
            employees: Array.from(selectedEmployees),
            formations: Array.from(selectedFormations),
            timestamp: Date.now()
        };
        localStorage.setItem('inscriptionGroupeeSelections', JSON.stringify(selections));
    } catch (error) {
        console.warn('Impossible de sauvegarder les s√©lections:', error);
    }
}

// Charger les s√©lections sauvegard√©es
function loadSelectionsFromLocalStorage() {
    try {
        const saved = localStorage.getItem('inscriptionGroupeeSelections');
        if (saved) {
            const selections = JSON.parse(saved);
            // V√©rifier que la sauvegarde n'est pas trop ancienne (1 heure)
            if (Date.now() - selections.timestamp < 60 * 60 * 1000) {
                selections.employees.forEach(function(id) { selectedEmployees.add(id); });
                selections.formations.forEach(function(id) { selectedFormations.add(id); });
                
                // Mettre √† jour l'UI
                employeesData.forEach(function(emp) { updateEmployeeUI(emp.id); });
                formationsData.forEach(function(form) { updateFormationUI(form.id); });
                
                updateSummary();
                console.log('S√©lections restaur√©es depuis le localStorage');
            }
        }
    } catch (error) {
        console.warn('Impossible de charger les s√©lections sauvegard√©es:', error);
    }
}

// Activer l'auto-save (optionnel - comment√© par d√©faut)
// loadSelectionsFromLocalStorage();
// setInterval(saveSelectionsToLocalStorage, 30000); // Sauvegarder toutes les 30 secondes

// ========================================
// GESTION DES ERREURS GLOBALES
// ========================================

// Gestion des erreurs JavaScript
window.addEventListener('error', function(event) {
    console.error('Erreur JavaScript:', event.error);
});

// Gestion des erreurs de promesses non catch√©es
window.addEventListener('unhandledrejection', function(event) {
    console.error('Promise rejet√©e:', event.reason);
});

console.log('Script d\'inscription group√©e initialis√© avec succ√®s');
</script>