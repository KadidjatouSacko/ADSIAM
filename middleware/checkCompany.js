// middleware/checkCompany.js - Version am√©lior√©e avec gestion des statuts

import { sequelize } from '../models/index.js';

export const checkCompany = async (req, res, next) => {
    try {
        console.log('üè¢ CheckCompany middleware - V√©rification acc√®s entreprise');
        
        // V√©rifier si l'utilisateur est connect√©
        if (!req.session?.userId) {
            console.log('‚ùå Utilisateur non connect√© - Redirection vers login');
            req.flash('error', 'Veuillez vous connecter pour acc√©der √† l\'espace entreprise.');
            return res.redirect('/auth/login');
        }

        // R√©cup√©rer les donn√©es utilisateur depuis la session ou la DB
        let user = req.session.user;
        
        // Si pas de donn√©es en session, les r√©cup√©rer de la DB
        if (!user || !user.role) {
            console.log('üîÑ R√©cup√©ration des donn√©es utilisateur depuis la DB');
            const { QueryTypes } = await import('sequelize');
            
            const userData = await sequelize.query(`
                SELECT 
                    id, prenom, nom, email, role, statut, 
                    type_utilisateur, societe_rattachee,
                    CASE 
                        WHEN type_utilisateur = 'aide_domicile' THEN 'Aide √† domicile'
                        WHEN type_utilisateur = 'aide_soignant' THEN 'Aide-soignant'
                        WHEN type_utilisateur = 'formateur' THEN 'Formateur'
                        WHEN role = 'societe' THEN 'Entreprise'
                        WHEN role = 'admin' THEN 'Administrateur'
                        ELSE '√âtudiant'
                    END as type_display
                FROM users 
                WHERE id = :userId
            `, {
                type: QueryTypes.SELECT,
                replacements: { userId: req.session.userId }
            });
            
            if (!userData[0]) {
                console.log('‚ùå Utilisateur non trouv√© en DB');
                req.session.destroy();
                return res.redirect('/auth/login');
            }
            
            // Mettre √† jour la session
            user = userData[0];
            req.session.user = user;
        }

        console.log(`üë§ Utilisateur: ${user.prenom} ${user.nom} (Role: ${user.role}, Statut: ${user.statut})`);

        // V√©rifier si l'utilisateur est une entreprise
        if (user.role !== 'societe') {
            console.log(`‚ùå Acc√®s refus√© - Role: ${user.role} (attendu: societe)`);
            req.flash('error', 'Acc√®s non autoris√©. Cette section est r√©serv√©e aux entreprises.');
            
            // Rediriger vers le bon dashboard selon le r√¥le
            if (user.role === 'admin') {
                return res.redirect('/admin');
            } else {
                return res.redirect('/dashboard');
            }
        }

        // AM√âLIORATION: Gestion flexible des statuts
        switch (user.statut) {
            case 'actif':
                // Acc√®s normal autoris√©
                console.log('‚úÖ Compte actif - Acc√®s autoris√©');
                break;
                
            case 'en_attente':
                // Acc√®s limit√© avec message d'information
                console.log('‚ö†Ô∏è Compte en attente - Acc√®s limit√© autoris√©');
                req.flash('warning', 'Votre compte entreprise est en cours de validation. Certaines fonctionnalit√©s peuvent √™tre limit√©es.');
                res.locals.accountPending = true;
                break;
                
            case 'suspendu':
                console.log(`‚ùå Compte suspendu`);
                req.flash('error', 'Votre compte entreprise a √©t√© suspendu. Contactez notre support pour plus d\'informations.');
                return res.redirect('/auth/login');
                
            case 'inactif':
                console.log(`‚ùå Compte inactif`);
                req.flash('error', 'Votre compte entreprise est inactif. Contactez notre support pour le r√©activer.');
                return res.redirect('/auth/login');
                
            default:
                console.log(`‚ö†Ô∏è Statut inconnu: ${user.statut} - Acc√®s autoris√© avec avertissement`);
                req.flash('info', 'Statut de compte non reconnu. Contactez le support si vous rencontrez des probl√®mes.');
                break;
        }

        // Ajouter l'utilisateur √† req pour les controllers
        req.user = user;
        
        // Variables pour les vues
        res.locals.currentUser = user;
        res.locals.isCompany = true;
        res.locals.companyName = user.societe_rattachee;
        res.locals.accountStatus = user.statut;
        res.locals.canManageEmployees = user.statut === 'actif';
        res.locals.canCreateInvoices = user.statut === 'actif';
        
        console.log('‚úÖ Acc√®s entreprise autoris√©');
        next();

    } catch (error) {
        console.error('üí• Erreur middleware checkCompany:', error);
        req.flash('error', 'Erreur lors de la v√©rification des permissions.');
        res.redirect('/auth/login');
    }
};